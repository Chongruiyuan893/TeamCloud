# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class Component(msrest.serialization.Model):
    """Component.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param href:
    :type href: str
    :param organization: Required.
    :type organization: str
    :param template_id: Required.
    :type template_id: str
    :param project_id: Required.
    :type project_id: str
    :param provider: Required.
    :type provider: str
    :param creator: Required.
    :type creator: str
    :param display_name:
    :type display_name: str
    :param description:
    :type description: str
    :param input_json:
    :type input_json: str
    :param value_json:
    :type value_json: str
    :param type: Required.  Possible values include: "Custom", "AzureResource", "Environment",
     "GitRepository".
    :type type: str or ~teamcloud.models.ComponentType
    :param resource_id:
    :type resource_id: str
    :param resource_state:  Possible values include: "Pending", "Initializing", "Provisioning",
     "Succeeded", "Failed".
    :type resource_state: str or ~teamcloud.models.ComponentResourceState
    :param deployment_scope_id:
    :type deployment_scope_id: str
    :param identity_id:
    :type identity_id: str
    :param storage_id:
    :type storage_id: str
    :param vault_id:
    :type vault_id: str
    :param deleted:
    :type deleted: ~datetime.datetime
    :param ttl:
    :type ttl: int
    :ivar slug: Required.
    :vartype slug: str
    :param id: Required.
    :type id: str
    """

    _validation = {
        'organization': {'required': True},
        'template_id': {'required': True},
        'project_id': {'required': True},
        'provider': {'required': True},
        'creator': {'required': True},
        'type': {'required': True},
        'slug': {'required': True, 'readonly': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'href': {'key': 'href', 'type': 'str'},
        'organization': {'key': 'organization', 'type': 'str'},
        'template_id': {'key': 'templateId', 'type': 'str'},
        'project_id': {'key': 'projectId', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'creator': {'key': 'creator', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'input_json': {'key': 'inputJson', 'type': 'str'},
        'value_json': {'key': 'valueJson', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_state': {'key': 'resourceState', 'type': 'str'},
        'deployment_scope_id': {'key': 'deploymentScopeId', 'type': 'str'},
        'identity_id': {'key': 'identityId', 'type': 'str'},
        'storage_id': {'key': 'storageId', 'type': 'str'},
        'vault_id': {'key': 'vaultId', 'type': 'str'},
        'deleted': {'key': 'deleted', 'type': 'iso-8601'},
        'ttl': {'key': 'ttl', 'type': 'int'},
        'slug': {'key': 'slug', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Component, self).__init__(**kwargs)
        self.href = kwargs.get('href', None)
        self.organization = kwargs['organization']
        self.template_id = kwargs['template_id']
        self.project_id = kwargs['project_id']
        self.provider = kwargs['provider']
        self.creator = kwargs['creator']
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.input_json = kwargs.get('input_json', None)
        self.value_json = kwargs.get('value_json', None)
        self.type = kwargs['type']
        self.resource_id = kwargs.get('resource_id', None)
        self.resource_state = kwargs.get('resource_state', None)
        self.deployment_scope_id = kwargs.get('deployment_scope_id', None)
        self.identity_id = kwargs.get('identity_id', None)
        self.storage_id = kwargs.get('storage_id', None)
        self.vault_id = kwargs.get('vault_id', None)
        self.deleted = kwargs.get('deleted', None)
        self.ttl = kwargs.get('ttl', None)
        self.slug = None
        self.id = kwargs['id']


class ComponentDataResult(msrest.serialization.Model):
    """ComponentDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.Component
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'Component'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ComponentDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ComponentDefinition(msrest.serialization.Model):
    """ComponentDefinition.

    All required parameters must be populated in order to send to Azure.

    :param template_id: Required.
    :type template_id: str
    :param display_name: Required.
    :type display_name: str
    :param input_json:
    :type input_json: str
    :param deployment_scope_id:
    :type deployment_scope_id: str
    """

    _validation = {
        'template_id': {'required': True},
        'display_name': {'required': True},
    }

    _attribute_map = {
        'template_id': {'key': 'templateId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'input_json': {'key': 'inputJson', 'type': 'str'},
        'deployment_scope_id': {'key': 'deploymentScopeId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ComponentDefinition, self).__init__(**kwargs)
        self.template_id = kwargs['template_id']
        self.display_name = kwargs['display_name']
        self.input_json = kwargs.get('input_json', None)
        self.deployment_scope_id = kwargs.get('deployment_scope_id', None)


class ComponentListDataResult(msrest.serialization.Model):
    """ComponentListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.Component]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[Component]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ComponentListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ComponentTask(msrest.serialization.Model):
    """ComponentTask.

    All required parameters must be populated in order to send to Azure.

    :param organization: Required.
    :type organization: str
    :param component_id: Required.
    :type component_id: str
    :param project_id: Required.
    :type project_id: str
    :param storage_id:
    :type storage_id: str
    :param vault_id:
    :type vault_id: str
    :param requested_by:
    :type requested_by: str
    :param type:  Possible values include: 0, 1, 2.
    :type type: str or ~teamcloud.models.Enum3
    :param type_name:
    :type type_name: str
    :param created:
    :type created: ~datetime.datetime
    :param started:
    :type started: ~datetime.datetime
    :param finished:
    :type finished: ~datetime.datetime
    :param input_json:
    :type input_json: str
    :param output:
    :type output: str
    :param resource_id:
    :type resource_id: str
    :param resource_state:  Possible values include: "Pending", "Initializing", "Provisioning",
     "Succeeded", "Failed".
    :type resource_state: str or ~teamcloud.models.ComponentTaskResourceState
    :param exit_code:
    :type exit_code: int
    :param id: Required.
    :type id: str
    """

    _validation = {
        'organization': {'required': True},
        'component_id': {'required': True},
        'project_id': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'component_id': {'key': 'componentId', 'type': 'str'},
        'project_id': {'key': 'projectId', 'type': 'str'},
        'storage_id': {'key': 'storageId', 'type': 'str'},
        'vault_id': {'key': 'vaultId', 'type': 'str'},
        'requested_by': {'key': 'requestedBy', 'type': 'str'},
        'type': {'key': 'type', 'type': 'int'},
        'type_name': {'key': 'typeName', 'type': 'str'},
        'created': {'key': 'created', 'type': 'iso-8601'},
        'started': {'key': 'started', 'type': 'iso-8601'},
        'finished': {'key': 'finished', 'type': 'iso-8601'},
        'input_json': {'key': 'inputJson', 'type': 'str'},
        'output': {'key': 'output', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_state': {'key': 'resourceState', 'type': 'str'},
        'exit_code': {'key': 'exitCode', 'type': 'int'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ComponentTask, self).__init__(**kwargs)
        self.organization = kwargs['organization']
        self.component_id = kwargs['component_id']
        self.project_id = kwargs['project_id']
        self.storage_id = kwargs.get('storage_id', None)
        self.vault_id = kwargs.get('vault_id', None)
        self.requested_by = kwargs.get('requested_by', None)
        self.type = kwargs.get('type', None)
        self.type_name = kwargs.get('type_name', None)
        self.created = kwargs.get('created', None)
        self.started = kwargs.get('started', None)
        self.finished = kwargs.get('finished', None)
        self.input_json = kwargs.get('input_json', None)
        self.output = kwargs.get('output', None)
        self.resource_id = kwargs.get('resource_id', None)
        self.resource_state = kwargs.get('resource_state', None)
        self.exit_code = kwargs.get('exit_code', None)
        self.id = kwargs['id']


class ComponentTaskDataResult(msrest.serialization.Model):
    """ComponentTaskDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.ComponentTask
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'ComponentTask'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ComponentTaskDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ComponentTaskDefinition(msrest.serialization.Model):
    """ComponentTaskDefinition.

    All required parameters must be populated in order to send to Azure.

    :param task_id: Required.
    :type task_id: str
    :param input_json:
    :type input_json: str
    """

    _validation = {
        'task_id': {'required': True},
    }

    _attribute_map = {
        'task_id': {'key': 'taskId', 'type': 'str'},
        'input_json': {'key': 'inputJson', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ComponentTaskDefinition, self).__init__(**kwargs)
        self.task_id = kwargs['task_id']
        self.input_json = kwargs.get('input_json', None)


class ComponentTaskListDataResult(msrest.serialization.Model):
    """ComponentTaskListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.ComponentTask]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[ComponentTask]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ComponentTaskListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ComponentTaskTemplate(msrest.serialization.Model):
    """ComponentTaskTemplate.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param id:
    :type id: str
    :param display_name:
    :type display_name: str
    :param description:
    :type description: str
    :param input_json_schema:
    :type input_json_schema: str
    :param type: Required.  Possible values include: 0, 1, 2.
    :type type: str or ~teamcloud.models.Enum3
    :ivar type_name:
    :vartype type_name: str
    """

    _validation = {
        'type': {'required': True},
        'type_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'input_json_schema': {'key': 'inputJsonSchema', 'type': 'str'},
        'type': {'key': 'type', 'type': 'int'},
        'type_name': {'key': 'typeName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ComponentTaskTemplate, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.input_json_schema = kwargs.get('input_json_schema', None)
        self.type = kwargs['type']
        self.type_name = None


class ComponentTemplate(msrest.serialization.Model):
    """ComponentTemplate.

    All required parameters must be populated in order to send to Azure.

    :param organization: Required.
    :type organization: str
    :param parent_id: Required.
    :type parent_id: str
    :param provider:
    :type provider: str
    :param display_name:
    :type display_name: str
    :param description:
    :type description: str
    :param repository: Required.
    :type repository: ~teamcloud.models.RepositoryReference
    :param input_json_schema:
    :type input_json_schema: str
    :param tasks:
    :type tasks: list[~teamcloud.models.ComponentTaskTemplate]
    :param type: Required.  Possible values include: "Custom", "AzureResource", "Environment",
     "GitRepository".
    :type type: str or ~teamcloud.models.ComponentTemplateType
    :param folder:
    :type folder: str
    :param id: Required.
    :type id: str
    """

    _validation = {
        'organization': {'required': True},
        'parent_id': {'required': True},
        'repository': {'required': True},
        'type': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'parent_id': {'key': 'parentId', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'repository': {'key': 'repository', 'type': 'RepositoryReference'},
        'input_json_schema': {'key': 'inputJsonSchema', 'type': 'str'},
        'tasks': {'key': 'tasks', 'type': '[ComponentTaskTemplate]'},
        'type': {'key': 'type', 'type': 'str'},
        'folder': {'key': 'folder', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ComponentTemplate, self).__init__(**kwargs)
        self.organization = kwargs['organization']
        self.parent_id = kwargs['parent_id']
        self.provider = kwargs.get('provider', None)
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.repository = kwargs['repository']
        self.input_json_schema = kwargs.get('input_json_schema', None)
        self.tasks = kwargs.get('tasks', None)
        self.type = kwargs['type']
        self.folder = kwargs.get('folder', None)
        self.id = kwargs['id']


class ComponentTemplateDataResult(msrest.serialization.Model):
    """ComponentTemplateDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.ComponentTemplate
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'ComponentTemplate'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ComponentTemplateDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ComponentTemplateListDataResult(msrest.serialization.Model):
    """ComponentTemplateListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.ComponentTemplate]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[ComponentTemplate]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ComponentTemplateListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class DeploymentScope(msrest.serialization.Model):
    """DeploymentScope.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param organization: Required.
    :type organization: str
    :ivar slug: Required.
    :vartype slug: str
    :param display_name: Required.
    :type display_name: str
    :param is_default: Required.
    :type is_default: bool
    :param management_group_id:
    :type management_group_id: str
    :param subscription_ids:
    :type subscription_ids: list[str]
    :param id: Required.
    :type id: str
    """

    _validation = {
        'organization': {'required': True},
        'slug': {'required': True, 'readonly': True},
        'display_name': {'required': True},
        'is_default': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'slug': {'key': 'slug', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'management_group_id': {'key': 'managementGroupId', 'type': 'str'},
        'subscription_ids': {'key': 'subscriptionIds', 'type': '[str]'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeploymentScope, self).__init__(**kwargs)
        self.organization = kwargs['organization']
        self.slug = None
        self.display_name = kwargs['display_name']
        self.is_default = kwargs['is_default']
        self.management_group_id = kwargs.get('management_group_id', None)
        self.subscription_ids = kwargs.get('subscription_ids', None)
        self.id = kwargs['id']


class DeploymentScopeDataResult(msrest.serialization.Model):
    """DeploymentScopeDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.DeploymentScope
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'DeploymentScope'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeploymentScopeDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class DeploymentScopeDefinition(msrest.serialization.Model):
    """DeploymentScopeDefinition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar slug:
    :vartype slug: str
    :param display_name: Required.
    :type display_name: str
    :param is_default:
    :type is_default: bool
    :param management_group_id:
    :type management_group_id: str
    :param subscription_ids:
    :type subscription_ids: list[str]
    """

    _validation = {
        'slug': {'readonly': True},
        'display_name': {'required': True},
    }

    _attribute_map = {
        'slug': {'key': 'slug', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'management_group_id': {'key': 'managementGroupId', 'type': 'str'},
        'subscription_ids': {'key': 'subscriptionIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeploymentScopeDefinition, self).__init__(**kwargs)
        self.slug = None
        self.display_name = kwargs['display_name']
        self.is_default = kwargs.get('is_default', None)
        self.management_group_id = kwargs.get('management_group_id', None)
        self.subscription_ids = kwargs.get('subscription_ids', None)


class DeploymentScopeListDataResult(msrest.serialization.Model):
    """DeploymentScopeListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.DeploymentScope]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[DeploymentScope]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeploymentScopeListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ErrorResult(msrest.serialization.Model):
    """ErrorResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param errors:
    :type errors: list[~teamcloud.models.ResultError]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[ResultError]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.errors = kwargs.get('errors', None)


class Organization(msrest.serialization.Model):
    """Organization.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param tenant: Required.
    :type tenant: str
    :ivar slug: Required.
    :vartype slug: str
    :param display_name: Required.
    :type display_name: str
    :param subscription_id: Required.
    :type subscription_id: str
    :param location: Required.
    :type location: str
    :param tags: A set of tags. Dictionary of :code:`<string>`.
    :type tags: dict[str, str]
    :param resource_id:
    :type resource_id: str
    :param resource_state:  Possible values include: "Pending", "Initializing", "Provisioning",
     "Succeeded", "Failed".
    :type resource_state: str or ~teamcloud.models.OrganizationResourceState
    :param id: Required.
    :type id: str
    """

    _validation = {
        'tenant': {'required': True},
        'slug': {'required': True, 'readonly': True},
        'display_name': {'required': True},
        'subscription_id': {'required': True},
        'location': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'tenant': {'key': 'tenant', 'type': 'str'},
        'slug': {'key': 'slug', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_state': {'key': 'resourceState', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Organization, self).__init__(**kwargs)
        self.tenant = kwargs['tenant']
        self.slug = None
        self.display_name = kwargs['display_name']
        self.subscription_id = kwargs['subscription_id']
        self.location = kwargs['location']
        self.tags = kwargs.get('tags', None)
        self.resource_id = kwargs.get('resource_id', None)
        self.resource_state = kwargs.get('resource_state', None)
        self.id = kwargs['id']


class OrganizationDataResult(msrest.serialization.Model):
    """OrganizationDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.Organization
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'Organization'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OrganizationDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class OrganizationDefinition(msrest.serialization.Model):
    """OrganizationDefinition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar slug:
    :vartype slug: str
    :param display_name: Required.
    :type display_name: str
    :param subscription_id: Required.
    :type subscription_id: str
    :param location: Required.
    :type location: str
    """

    _validation = {
        'slug': {'readonly': True},
        'display_name': {'required': True},
        'subscription_id': {'required': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'slug': {'key': 'slug', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OrganizationDefinition, self).__init__(**kwargs)
        self.slug = None
        self.display_name = kwargs['display_name']
        self.subscription_id = kwargs['subscription_id']
        self.location = kwargs['location']


class OrganizationListDataResult(msrest.serialization.Model):
    """OrganizationListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.Organization]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[Organization]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OrganizationListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class Project(msrest.serialization.Model):
    """Project.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param organization: Required.
    :type organization: str
    :ivar slug: Required.
    :vartype slug: str
    :param display_name: Required.
    :type display_name: str
    :param template: Required.
    :type template: str
    :param template_input:
    :type template_input: str
    :param users:
    :type users: list[~teamcloud.models.User]
    :param tags: A set of tags. Dictionary of :code:`<string>`.
    :type tags: dict[str, str]
    :param resource_id:
    :type resource_id: str
    :param resource_state:  Possible values include: "Pending", "Initializing", "Provisioning",
     "Succeeded", "Failed".
    :type resource_state: str or ~teamcloud.models.ProjectResourceState
    :param id: Required.
    :type id: str
    """

    _validation = {
        'organization': {'required': True},
        'slug': {'required': True, 'readonly': True},
        'display_name': {'required': True},
        'template': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'slug': {'key': 'slug', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'template': {'key': 'template', 'type': 'str'},
        'template_input': {'key': 'templateInput', 'type': 'str'},
        'users': {'key': 'users', 'type': '[User]'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_state': {'key': 'resourceState', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Project, self).__init__(**kwargs)
        self.organization = kwargs['organization']
        self.slug = None
        self.display_name = kwargs['display_name']
        self.template = kwargs['template']
        self.template_input = kwargs.get('template_input', None)
        self.users = kwargs.get('users', None)
        self.tags = kwargs.get('tags', None)
        self.resource_id = kwargs.get('resource_id', None)
        self.resource_state = kwargs.get('resource_state', None)
        self.id = kwargs['id']


class ProjectDataResult(msrest.serialization.Model):
    """ProjectDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.Project
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'Project'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ProjectDefinition(msrest.serialization.Model):
    """ProjectDefinition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar slug:
    :vartype slug: str
    :param display_name: Required.
    :type display_name: str
    :param template: Required.
    :type template: str
    :param template_input: Required.
    :type template_input: str
    :param users:
    :type users: list[~teamcloud.models.UserDefinition]
    """

    _validation = {
        'slug': {'readonly': True},
        'display_name': {'required': True},
        'template': {'required': True},
        'template_input': {'required': True},
    }

    _attribute_map = {
        'slug': {'key': 'slug', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'template': {'key': 'template', 'type': 'str'},
        'template_input': {'key': 'templateInput', 'type': 'str'},
        'users': {'key': 'users', 'type': '[UserDefinition]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectDefinition, self).__init__(**kwargs)
        self.slug = None
        self.display_name = kwargs['display_name']
        self.template = kwargs['template']
        self.template_input = kwargs['template_input']
        self.users = kwargs.get('users', None)


class ProjectIdentity(msrest.serialization.Model):
    """ProjectIdentity.

    All required parameters must be populated in order to send to Azure.

    :param project_id: Required.
    :type project_id: str
    :param organization: Required.
    :type organization: str
    :param display_name: Required.
    :type display_name: str
    :param deployment_scope_id: Required.
    :type deployment_scope_id: str
    :param tenant_id:
    :type tenant_id: str
    :param client_id:
    :type client_id: str
    :param client_secret:
    :type client_secret: str
    :param redirect_urls:
    :type redirect_urls: list[str]
    :param object_id:
    :type object_id: str
    :param id: Required.
    :type id: str
    """

    _validation = {
        'project_id': {'required': True},
        'organization': {'required': True},
        'display_name': {'required': True},
        'deployment_scope_id': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'project_id': {'key': 'projectId', 'type': 'str'},
        'organization': {'key': 'organization', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'deployment_scope_id': {'key': 'deploymentScopeId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
        'client_secret': {'key': 'clientSecret', 'type': 'str'},
        'redirect_urls': {'key': 'redirectUrls', 'type': '[str]'},
        'object_id': {'key': 'objectId', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectIdentity, self).__init__(**kwargs)
        self.project_id = kwargs['project_id']
        self.organization = kwargs['organization']
        self.display_name = kwargs['display_name']
        self.deployment_scope_id = kwargs['deployment_scope_id']
        self.tenant_id = kwargs.get('tenant_id', None)
        self.client_id = kwargs.get('client_id', None)
        self.client_secret = kwargs.get('client_secret', None)
        self.redirect_urls = kwargs.get('redirect_urls', None)
        self.object_id = kwargs.get('object_id', None)
        self.id = kwargs['id']


class ProjectIdentityDataResult(msrest.serialization.Model):
    """ProjectIdentityDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.ProjectIdentity
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'ProjectIdentity'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectIdentityDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ProjectIdentityDefinition(msrest.serialization.Model):
    """ProjectIdentityDefinition.

    All required parameters must be populated in order to send to Azure.

    :param display_name: Required.
    :type display_name: str
    :param deployment_scope_id: Required.
    :type deployment_scope_id: str
    """

    _validation = {
        'display_name': {'required': True},
        'deployment_scope_id': {'required': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'deployment_scope_id': {'key': 'deploymentScopeId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectIdentityDefinition, self).__init__(**kwargs)
        self.display_name = kwargs['display_name']
        self.deployment_scope_id = kwargs['deployment_scope_id']


class ProjectIdentityListDataResult(msrest.serialization.Model):
    """ProjectIdentityListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.ProjectIdentity]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[ProjectIdentity]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectIdentityListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ProjectListDataResult(msrest.serialization.Model):
    """ProjectListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.Project]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[Project]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ProjectMembership(msrest.serialization.Model):
    """ProjectMembership.

    All required parameters must be populated in order to send to Azure.

    :param project_id: Required.
    :type project_id: str
    :param role: Required.  Possible values include: "None", "Member", "Admin", "Owner".
    :type role: str or ~teamcloud.models.ProjectMembershipRole
    :param properties: Dictionary of :code:`<string>`.
    :type properties: dict[str, str]
    """

    _validation = {
        'project_id': {'required': True},
        'role': {'required': True},
    }

    _attribute_map = {
        'project_id': {'key': 'projectId', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectMembership, self).__init__(**kwargs)
        self.project_id = kwargs['project_id']
        self.role = kwargs['role']
        self.properties = kwargs.get('properties', None)


class ProjectTemplate(msrest.serialization.Model):
    """ProjectTemplate.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param organization: Required.
    :type organization: str
    :ivar slug: Required.
    :vartype slug: str
    :param name:
    :type name: str
    :param display_name: Required.
    :type display_name: str
    :param components:
    :type components: list[str]
    :param repository: Required.
    :type repository: ~teamcloud.models.RepositoryReference
    :param description:
    :type description: str
    :param is_default: Required.
    :type is_default: bool
    :param input_json_schema:
    :type input_json_schema: str
    :param id: Required.
    :type id: str
    """

    _validation = {
        'organization': {'required': True},
        'slug': {'required': True, 'readonly': True},
        'display_name': {'required': True},
        'repository': {'required': True},
        'is_default': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'slug': {'key': 'slug', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'components': {'key': 'components', 'type': '[str]'},
        'repository': {'key': 'repository', 'type': 'RepositoryReference'},
        'description': {'key': 'description', 'type': 'str'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'input_json_schema': {'key': 'inputJsonSchema', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectTemplate, self).__init__(**kwargs)
        self.organization = kwargs['organization']
        self.slug = None
        self.name = kwargs.get('name', None)
        self.display_name = kwargs['display_name']
        self.components = kwargs.get('components', None)
        self.repository = kwargs['repository']
        self.description = kwargs.get('description', None)
        self.is_default = kwargs['is_default']
        self.input_json_schema = kwargs.get('input_json_schema', None)
        self.id = kwargs['id']


class ProjectTemplateDataResult(msrest.serialization.Model):
    """ProjectTemplateDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.ProjectTemplate
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'ProjectTemplate'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectTemplateDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ProjectTemplateDefinition(msrest.serialization.Model):
    """ProjectTemplateDefinition.

    All required parameters must be populated in order to send to Azure.

    :param display_name: Required.
    :type display_name: str
    :param repository: Required.
    :type repository: ~teamcloud.models.RepositoryDefinition
    """

    _validation = {
        'display_name': {'required': True},
        'repository': {'required': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'repository': {'key': 'repository', 'type': 'RepositoryDefinition'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectTemplateDefinition, self).__init__(**kwargs)
        self.display_name = kwargs['display_name']
        self.repository = kwargs['repository']


class ProjectTemplateListDataResult(msrest.serialization.Model):
    """ProjectTemplateListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.ProjectTemplate]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[ProjectTemplate]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectTemplateListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class RepositoryDefinition(msrest.serialization.Model):
    """RepositoryDefinition.

    All required parameters must be populated in order to send to Azure.

    :param url: Required.
    :type url: str
    :param token:
    :type token: str
    :param version:
    :type version: str
    """

    _validation = {
        'url': {'required': True},
    }

    _attribute_map = {
        'url': {'key': 'url', 'type': 'str'},
        'token': {'key': 'token', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RepositoryDefinition, self).__init__(**kwargs)
        self.url = kwargs['url']
        self.token = kwargs.get('token', None)
        self.version = kwargs.get('version', None)


class RepositoryReference(msrest.serialization.Model):
    """RepositoryReference.

    All required parameters must be populated in order to send to Azure.

    :param url: Required.
    :type url: str
    :param token:
    :type token: str
    :param version:
    :type version: str
    :param basel_url:
    :type basel_url: str
    :param mount_url:
    :type mount_url: str
    :param ref:
    :type ref: str
    :param provider: Required.  Possible values include: "Unknown", "GitHub", "DevOps".
    :type provider: str or ~teamcloud.models.RepositoryReferenceProvider
    :param type: Required.  Possible values include: "Unknown", "Tag", "Branch", "Hash".
    :type type: str or ~teamcloud.models.RepositoryReferenceType
    :param organization:
    :type organization: str
    :param repository:
    :type repository: str
    :param project:
    :type project: str
    """

    _validation = {
        'url': {'required': True},
        'provider': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'url': {'key': 'url', 'type': 'str'},
        'token': {'key': 'token', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'basel_url': {'key': 'baselUrl', 'type': 'str'},
        'mount_url': {'key': 'mountUrl', 'type': 'str'},
        'ref': {'key': 'ref', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'organization': {'key': 'organization', 'type': 'str'},
        'repository': {'key': 'repository', 'type': 'str'},
        'project': {'key': 'project', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RepositoryReference, self).__init__(**kwargs)
        self.url = kwargs['url']
        self.token = kwargs.get('token', None)
        self.version = kwargs.get('version', None)
        self.basel_url = kwargs.get('basel_url', None)
        self.mount_url = kwargs.get('mount_url', None)
        self.ref = kwargs.get('ref', None)
        self.provider = kwargs['provider']
        self.type = kwargs['type']
        self.organization = kwargs.get('organization', None)
        self.repository = kwargs.get('repository', None)
        self.project = kwargs.get('project', None)


class ResultError(msrest.serialization.Model):
    """ResultError.

    :param code:  Possible values include: "Unknown", "Failed", "Conflict", "NotFound",
     "ServerError", "ValidationError", "Unauthorized", "Forbidden".
    :type code: str or ~teamcloud.models.ResultErrorCode
    :param message:
    :type message: str
    :param errors:
    :type errors: list[~teamcloud.models.ValidationError]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[ValidationError]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ResultError, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.errors = kwargs.get('errors', None)


class StatusResult(msrest.serialization.Model):
    """StatusResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar state:
    :vartype state: str
    :param state_message:
    :type state_message: str
    :param location:
    :type location: str
    :param errors:
    :type errors: list[~teamcloud.models.ResultError]
    :param tracking_id:
    :type tracking_id: str
    """

    _validation = {
        'state': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'state_message': {'key': 'stateMessage', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[ResultError]'},
        'tracking_id': {'key': '_trackingId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StatusResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.state = None
        self.state_message = kwargs.get('state_message', None)
        self.location = kwargs.get('location', None)
        self.errors = kwargs.get('errors', None)
        self.tracking_id = kwargs.get('tracking_id', None)


class StringDictionaryDataResult(msrest.serialization.Model):
    """StringDictionaryDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data: Dictionary of :code:`<string>`.
    :vartype data: dict[str, str]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StringDictionaryDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class User(msrest.serialization.Model):
    """User.

    All required parameters must be populated in order to send to Azure.

    :param organization: Required.
    :type organization: str
    :param user_type: Required.  Possible values include: "User", "System", "Provider",
     "Application".
    :type user_type: str or ~teamcloud.models.UserType
    :param role: Required.  Possible values include: "None", "Member", "Admin", "Owner".
    :type role: str or ~teamcloud.models.UserRole
    :param project_memberships:
    :type project_memberships: list[~teamcloud.models.ProjectMembership]
    :param properties: Dictionary of :code:`<string>`.
    :type properties: dict[str, str]
    :param id: Required.
    :type id: str
    """

    _validation = {
        'organization': {'required': True},
        'user_type': {'required': True},
        'role': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'organization': {'key': 'organization', 'type': 'str'},
        'user_type': {'key': 'userType', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'project_memberships': {'key': 'projectMemberships', 'type': '[ProjectMembership]'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(User, self).__init__(**kwargs)
        self.organization = kwargs['organization']
        self.user_type = kwargs['user_type']
        self.role = kwargs['role']
        self.project_memberships = kwargs.get('project_memberships', None)
        self.properties = kwargs.get('properties', None)
        self.id = kwargs['id']


class UserDataResult(msrest.serialization.Model):
    """UserDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.User
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'User'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(UserDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class UserDefinition(msrest.serialization.Model):
    """UserDefinition.

    All required parameters must be populated in order to send to Azure.

    :param identifier: Required.
    :type identifier: str
    :param role: Required.
    :type role: str
    :param properties: Dictionary of :code:`<string>`.
    :type properties: dict[str, str]
    """

    _validation = {
        'identifier': {'required': True},
        'role': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(UserDefinition, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']
        self.role = kwargs['role']
        self.properties = kwargs.get('properties', None)


class UserListDataResult(msrest.serialization.Model):
    """UserListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.User]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[User]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(UserListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ValidationError(msrest.serialization.Model):
    """ValidationError.

    :param field:
    :type field: str
    :param message:
    :type message: str
    """

    _attribute_map = {
        'field': {'key': 'field', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ValidationError, self).__init__(**kwargs)
        self.field = kwargs.get('field', None)
        self.message = kwargs.get('message', None)
