# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class AzureResourceGroup(msrest.serialization.Model):
    """AzureResourceGroup.

    :param id:
    :type id: str
    :param name:
    :type name: str
    :param subscription_id:
    :type subscription_id: str
    :param region:
    :type region: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'region': {'key': 'region', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AzureResourceGroup, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.subscription_id = kwargs.get('subscription_id', None)
        self.region = kwargs.get('region', None)


class Component(msrest.serialization.Model):
    """Component.

    :param id:
    :type id: str
    :param href:
    :type href: str
    :param offer_id:
    :type offer_id: str
    :param project_id:
    :type project_id: str
    :param provider_id:
    :type provider_id: str
    :param requested_by:
    :type requested_by: str
    :param display_name:
    :type display_name: str
    :param description:
    :type description: str
    :param input_json:
    :type input_json: str
    :param value_json:
    :type value_json: str
    :param scope:  Possible values include: "System", "Project", "All".
    :type scope: str or ~teamcloud.models.ComponentScope
    :param type:  Possible values include: "Custom", "GitRepository".
    :type type: str or ~teamcloud.models.ComponentType
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'href': {'key': 'href', 'type': 'str'},
        'offer_id': {'key': 'offerId', 'type': 'str'},
        'project_id': {'key': 'projectId', 'type': 'str'},
        'provider_id': {'key': 'providerId', 'type': 'str'},
        'requested_by': {'key': 'requestedBy', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'input_json': {'key': 'inputJson', 'type': 'str'},
        'value_json': {'key': 'valueJson', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Component, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.href = kwargs.get('href', None)
        self.offer_id = kwargs.get('offer_id', None)
        self.project_id = kwargs.get('project_id', None)
        self.provider_id = kwargs.get('provider_id', None)
        self.requested_by = kwargs.get('requested_by', None)
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.input_json = kwargs.get('input_json', None)
        self.value_json = kwargs.get('value_json', None)
        self.scope = kwargs.get('scope', None)
        self.type = kwargs.get('type', None)


class ComponentDataResult(msrest.serialization.Model):
    """ComponentDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.Component
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'Component'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ComponentDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ComponentListDataResult(msrest.serialization.Model):
    """ComponentListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.Component]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[Component]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ComponentListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ComponentOffer(msrest.serialization.Model):
    """ComponentOffer.

    :param id:
    :type id: str
    :param provider_id:
    :type provider_id: str
    :param display_name:
    :type display_name: str
    :param description:
    :type description: str
    :param input_json_schema:
    :type input_json_schema: str
    :param scope:  Possible values include: "System", "Project", "All".
    :type scope: str or ~teamcloud.models.ComponentOfferScope
    :param type:  Possible values include: "Custom", "GitRepository".
    :type type: str or ~teamcloud.models.ComponentOfferType
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'provider_id': {'key': 'providerId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'input_json_schema': {'key': 'inputJsonSchema', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ComponentOffer, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.provider_id = kwargs.get('provider_id', None)
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.input_json_schema = kwargs.get('input_json_schema', None)
        self.scope = kwargs.get('scope', None)
        self.type = kwargs.get('type', None)


class ComponentOfferDataResult(msrest.serialization.Model):
    """ComponentOfferDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.ComponentOffer
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'ComponentOffer'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ComponentOfferDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ComponentOfferListDataResult(msrest.serialization.Model):
    """ComponentOfferListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.ComponentOffer]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[ComponentOffer]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ComponentOfferListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ComponentRequest(msrest.serialization.Model):
    """ComponentRequest.

    :param offer_id:
    :type offer_id: str
    :param input_json:
    :type input_json: str
    """

    _attribute_map = {
        'offer_id': {'key': 'offerId', 'type': 'str'},
        'input_json': {'key': 'inputJson', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ComponentRequest, self).__init__(**kwargs)
        self.offer_id = kwargs.get('offer_id', None)
        self.input_json = kwargs.get('input_json', None)


class ErrorResult(msrest.serialization.Model):
    """ErrorResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param errors:
    :type errors: list[~teamcloud.models.ResultError]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[ResultError]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.errors = kwargs.get('errors', None)


class Project(msrest.serialization.Model):
    """Project.

    :param id:
    :type id: str
    :param name:
    :type name: str
    :param type:
    :type type: ~teamcloud.models.ProjectType
    :param resource_group:
    :type resource_group: ~teamcloud.models.AzureResourceGroup
    :param users:
    :type users: list[~teamcloud.models.User]
    :param tags: A set of tags. Dictionary of :code:`<string>`.
    :type tags: dict[str, str]
    :param properties: Dictionary of :code:`<string>`.
    :type properties: dict[str, str]
    :param links:
    :type links: ~teamcloud.models.ProjectReferenceLinks
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'ProjectType'},
        'resource_group': {'key': 'resourceGroup', 'type': 'AzureResourceGroup'},
        'users': {'key': 'users', 'type': '[User]'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'links': {'key': '_links', 'type': 'ProjectReferenceLinks'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Project, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.type = kwargs.get('type', None)
        self.resource_group = kwargs.get('resource_group', None)
        self.users = kwargs.get('users', None)
        self.tags = kwargs.get('tags', None)
        self.properties = kwargs.get('properties', None)
        self.links = kwargs.get('links', None)


class ProjectDataResult(msrest.serialization.Model):
    """ProjectDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.Project
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'Project'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ProjectDefinition(msrest.serialization.Model):
    """ProjectDefinition.

    :param name:
    :type name: str
    :param project_type:
    :type project_type: str
    :param users:
    :type users: list[~teamcloud.models.UserDefinition]
    :param tags: A set of tags. Dictionary of :code:`<string>`.
    :type tags: dict[str, str]
    :param properties: Dictionary of :code:`<string>`.
    :type properties: dict[str, str]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'project_type': {'key': 'projectType', 'type': 'str'},
        'users': {'key': 'users', 'type': '[UserDefinition]'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectDefinition, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.project_type = kwargs.get('project_type', None)
        self.users = kwargs.get('users', None)
        self.tags = kwargs.get('tags', None)
        self.properties = kwargs.get('properties', None)


class ProjectIdentity(msrest.serialization.Model):
    """ProjectIdentity.

    :param id:
    :type id: str
    :param tenant_id:
    :type tenant_id: str
    :param application_id:
    :type application_id: str
    :param secret:
    :type secret: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'application_id': {'key': 'applicationId', 'type': 'str'},
        'secret': {'key': 'secret', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectIdentity, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.application_id = kwargs.get('application_id', None)
        self.secret = kwargs.get('secret', None)


class ProjectIdentityDataResult(msrest.serialization.Model):
    """ProjectIdentityDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.ProjectIdentity
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'ProjectIdentity'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectIdentityDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ProjectLink(msrest.serialization.Model):
    """ProjectLink.

    :param id:
    :type id: str
    :param href:
    :type href: str
    :param title:
    :type title: str
    :param type:  Possible values include: "Link", "Readme", "Service", "GitRepository",
     "AzureResource".
    :type type: str or ~teamcloud.models.ProjectLinkType
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'href': {'key': 'href', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectLink, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.href = kwargs.get('href', None)
        self.title = kwargs.get('title', None)
        self.type = kwargs.get('type', None)


class ProjectLinkDataResult(msrest.serialization.Model):
    """ProjectLinkDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.ProjectLink
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'ProjectLink'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectLinkDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ProjectListDataResult(msrest.serialization.Model):
    """ProjectListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.Project]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[Project]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ProjectMembership(msrest.serialization.Model):
    """ProjectMembership.

    :param project_id:
    :type project_id: str
    :param role:  Possible values include: "None", "Provider", "Member", "Owner".
    :type role: str or ~teamcloud.models.ProjectMembershipRole
    :param properties: Dictionary of :code:`<string>`.
    :type properties: dict[str, str]
    """

    _attribute_map = {
        'project_id': {'key': 'projectId', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectMembership, self).__init__(**kwargs)
        self.project_id = kwargs.get('project_id', None)
        self.role = kwargs.get('role', None)
        self.properties = kwargs.get('properties', None)


class ProjectReferenceLinks(msrest.serialization.Model):
    """ProjectReferenceLinks.

    :param self_property:
    :type self_property: ~teamcloud.models.ReferenceLink
    :param identity:
    :type identity: ~teamcloud.models.ReferenceLink
    :param users:
    :type users: ~teamcloud.models.ReferenceLink
    :param links:
    :type links: ~teamcloud.models.ReferenceLink
    :param offers:
    :type offers: ~teamcloud.models.ReferenceLink
    :param components:
    :type components: ~teamcloud.models.ReferenceLink
    """

    _attribute_map = {
        'self_property': {'key': '_self', 'type': 'ReferenceLink'},
        'identity': {'key': 'identity', 'type': 'ReferenceLink'},
        'users': {'key': 'users', 'type': 'ReferenceLink'},
        'links': {'key': 'links', 'type': 'ReferenceLink'},
        'offers': {'key': 'offers', 'type': 'ReferenceLink'},
        'components': {'key': 'components', 'type': 'ReferenceLink'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectReferenceLinks, self).__init__(**kwargs)
        self.self_property = kwargs.get('self_property', None)
        self.identity = kwargs.get('identity', None)
        self.users = kwargs.get('users', None)
        self.links = kwargs.get('links', None)
        self.offers = kwargs.get('offers', None)
        self.components = kwargs.get('components', None)


class ProjectType(msrest.serialization.Model):
    """ProjectType.

    :param id:
    :type id: str
    :param is_default:
    :type is_default: bool
    :param region:
    :type region: str
    :param subscriptions:
    :type subscriptions: list[str]
    :param subscription_capacity:
    :type subscription_capacity: int
    :param resource_group_name_prefix:
    :type resource_group_name_prefix: str
    :param providers:
    :type providers: list[~teamcloud.models.ProviderReference]
    :param tags: A set of tags. Dictionary of :code:`<string>`.
    :type tags: dict[str, str]
    :param properties: Dictionary of :code:`<string>`.
    :type properties: dict[str, str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'region': {'key': 'region', 'type': 'str'},
        'subscriptions': {'key': 'subscriptions', 'type': '[str]'},
        'subscription_capacity': {'key': 'subscriptionCapacity', 'type': 'int'},
        'resource_group_name_prefix': {'key': 'resourceGroupNamePrefix', 'type': 'str'},
        'providers': {'key': 'providers', 'type': '[ProviderReference]'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectType, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.is_default = kwargs.get('is_default', None)
        self.region = kwargs.get('region', None)
        self.subscriptions = kwargs.get('subscriptions', None)
        self.subscription_capacity = kwargs.get('subscription_capacity', None)
        self.resource_group_name_prefix = kwargs.get('resource_group_name_prefix', None)
        self.providers = kwargs.get('providers', None)
        self.tags = kwargs.get('tags', None)
        self.properties = kwargs.get('properties', None)


class ProjectTypeDataResult(msrest.serialization.Model):
    """ProjectTypeDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.ProjectType
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'ProjectType'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectTypeDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ProjectTypeListDataResult(msrest.serialization.Model):
    """ProjectTypeListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.ProjectType]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[ProjectType]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectTypeListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class Provider(msrest.serialization.Model):
    """Provider.

    :param id:
    :type id: str
    :param url:
    :type url: str
    :param auth_code:
    :type auth_code: str
    :param principal_id:
    :type principal_id: str
    :param version:
    :type version: str
    :param resource_group:
    :type resource_group: ~teamcloud.models.AzureResourceGroup
    :param events:
    :type events: list[str]
    :param event_subscriptions:
    :type event_subscriptions: list[~teamcloud.models.ProviderEventSubscription]
    :param properties: Dictionary of :code:`<string>`.
    :type properties: dict[str, str]
    :param registered:
    :type registered: ~datetime.datetime
    :param type:  Possible values include: "Standard", "Service", "Virtual".
    :type type: str or ~teamcloud.models.ProviderType
    :param command_mode:  Possible values include: "Simple", "Extended".
    :type command_mode: str or ~teamcloud.models.ProviderCommandMode
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'auth_code': {'key': 'authCode', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'resource_group': {'key': 'resourceGroup', 'type': 'AzureResourceGroup'},
        'events': {'key': 'events', 'type': '[str]'},
        'event_subscriptions': {'key': 'eventSubscriptions', 'type': '[ProviderEventSubscription]'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'registered': {'key': 'registered', 'type': 'iso-8601'},
        'type': {'key': 'type', 'type': 'str'},
        'command_mode': {'key': 'commandMode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Provider, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.url = kwargs.get('url', None)
        self.auth_code = kwargs.get('auth_code', None)
        self.principal_id = kwargs.get('principal_id', None)
        self.version = kwargs.get('version', None)
        self.resource_group = kwargs.get('resource_group', None)
        self.events = kwargs.get('events', None)
        self.event_subscriptions = kwargs.get('event_subscriptions', None)
        self.properties = kwargs.get('properties', None)
        self.registered = kwargs.get('registered', None)
        self.type = kwargs.get('type', None)
        self.command_mode = kwargs.get('command_mode', None)


class ProviderData(msrest.serialization.Model):
    """ProviderData.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id:
    :type id: str
    :param name:
    :type name: str
    :param value: Any object.
    :type value: object
    :param location:
    :type location: str
    :param is_secret:
    :type is_secret: bool
    :param is_shared:
    :type is_shared: bool
    :param scope:  Possible values include: "System", "Project".
    :type scope: str or ~teamcloud.models.ProviderDataScope
    :param data_type:  Possible values include: "Property", "Service".
    :type data_type: str or ~teamcloud.models.ProviderDataType
    :ivar string_value:
    :vartype string_value: str
    """

    _validation = {
        'string_value': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
        'location': {'key': 'location', 'type': 'str'},
        'is_secret': {'key': 'isSecret', 'type': 'bool'},
        'is_shared': {'key': 'isShared', 'type': 'bool'},
        'scope': {'key': 'scope', 'type': 'str'},
        'data_type': {'key': 'dataType', 'type': 'str'},
        'string_value': {'key': 'stringValue', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProviderData, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)
        self.location = kwargs.get('location', None)
        self.is_secret = kwargs.get('is_secret', None)
        self.is_shared = kwargs.get('is_shared', None)
        self.scope = kwargs.get('scope', None)
        self.data_type = kwargs.get('data_type', None)
        self.string_value = None


class ProviderDataListDataResult(msrest.serialization.Model):
    """ProviderDataListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.ProviderData]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[ProviderData]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProviderDataListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ProviderDataResult(msrest.serialization.Model):
    """ProviderDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.ProviderData
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'ProviderData'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProviderDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ProviderDataResultAutoGenerated(msrest.serialization.Model):
    """ProviderDataResultAutoGenerated.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.Provider
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'Provider'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProviderDataResultAutoGenerated, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class ProviderEventSubscription(msrest.serialization.Model):
    """ProviderEventSubscription.

    :param event_type:
    :type event_type: str
    """

    _attribute_map = {
        'event_type': {'key': 'eventType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProviderEventSubscription, self).__init__(**kwargs)
        self.event_type = kwargs.get('event_type', None)


class ProviderListDataResult(msrest.serialization.Model):
    """ProviderListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.Provider]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[Provider]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProviderListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ProviderReference(msrest.serialization.Model):
    """ProviderReference.

    :param id:
    :type id: str
    :param depends_on:
    :type depends_on: list[str]
    :param properties: Dictionary of :code:`<string>`.
    :type properties: dict[str, str]
    :param metadata: Dictionary of :code:`<any>`.
    :type metadata: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[str]'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'metadata': {'key': 'metadata', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProviderReference, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.depends_on = kwargs.get('depends_on', None)
        self.properties = kwargs.get('properties', None)
        self.metadata = kwargs.get('metadata', None)


class ReferenceLink(msrest.serialization.Model):
    """ReferenceLink.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param href:
    :type href: str
    :ivar templated:
    :vartype templated: bool
    """

    _validation = {
        'templated': {'readonly': True},
    }

    _attribute_map = {
        'href': {'key': 'href', 'type': 'str'},
        'templated': {'key': 'templated', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ReferenceLink, self).__init__(**kwargs)
        self.href = kwargs.get('href', None)
        self.templated = None


class ResultError(msrest.serialization.Model):
    """ResultError.

    :param code:  Possible values include: "Unknown", "Failed", "Conflict", "NotFound",
     "ServerError", "ValidationError", "Unauthorized", "Forbidden".
    :type code: str or ~teamcloud.models.ResultErrorCode
    :param message:
    :type message: str
    :param errors:
    :type errors: list[~teamcloud.models.ValidationError]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[ValidationError]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ResultError, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.errors = kwargs.get('errors', None)


class StatusResult(msrest.serialization.Model):
    """StatusResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar state:
    :vartype state: str
    :param state_message:
    :type state_message: str
    :param location:
    :type location: str
    :param errors:
    :type errors: list[~teamcloud.models.ResultError]
    :param tracking_id:
    :type tracking_id: str
    """

    _validation = {
        'state': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'state_message': {'key': 'stateMessage', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[ResultError]'},
        'tracking_id': {'key': '_trackingId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StatusResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.state = None
        self.state_message = kwargs.get('state_message', None)
        self.location = kwargs.get('location', None)
        self.errors = kwargs.get('errors', None)
        self.tracking_id = kwargs.get('tracking_id', None)


class StringDictionaryDataResult(msrest.serialization.Model):
    """StringDictionaryDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data: Dictionary of :code:`<string>`.
    :vartype data: dict[str, str]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StringDictionaryDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class TeamCloudApplication(msrest.serialization.Model):
    """TeamCloudApplication.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param url:
    :type url: str
    :param version:
    :type version: str
    :ivar type:  Default value: "Web".
    :vartype type: str
    :param resource_group:
    :type resource_group: ~teamcloud.models.AzureResourceGroup
    """

    _validation = {
        'type': {'constant': True},
    }

    _attribute_map = {
        'url': {'key': 'url', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'resource_group': {'key': 'resourceGroup', 'type': 'AzureResourceGroup'},
    }

    type = "Web"

    def __init__(
        self,
        **kwargs
    ):
        super(TeamCloudApplication, self).__init__(**kwargs)
        self.url = kwargs.get('url', None)
        self.version = kwargs.get('version', None)
        self.resource_group = kwargs.get('resource_group', None)


class TeamCloudInstance(msrest.serialization.Model):
    """TeamCloudInstance.

    :param version:
    :type version: str
    :param resource_group:
    :type resource_group: ~teamcloud.models.AzureResourceGroup
    :param tags: A set of tags. Dictionary of :code:`<string>`.
    :type tags: dict[str, str]
    :param applications:
    :type applications: list[~teamcloud.models.TeamCloudApplication]
    """

    _attribute_map = {
        'version': {'key': 'version', 'type': 'str'},
        'resource_group': {'key': 'resourceGroup', 'type': 'AzureResourceGroup'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'applications': {'key': 'applications', 'type': '[TeamCloudApplication]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TeamCloudInstance, self).__init__(**kwargs)
        self.version = kwargs.get('version', None)
        self.resource_group = kwargs.get('resource_group', None)
        self.tags = kwargs.get('tags', None)
        self.applications = kwargs.get('applications', None)


class TeamCloudInstanceDataResult(msrest.serialization.Model):
    """TeamCloudInstanceDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.TeamCloudInstance
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'TeamCloudInstance'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TeamCloudInstanceDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class User(msrest.serialization.Model):
    """User.

    :param id:
    :type id: str
    :param user_type:  Possible values include: "User", "System", "Provider", "Application".
    :type user_type: str or ~teamcloud.models.UserType
    :param role:  Possible values include: "None", "Provider", "Creator", "Admin".
    :type role: str or ~teamcloud.models.UserRole
    :param project_memberships:
    :type project_memberships: list[~teamcloud.models.ProjectMembership]
    :param properties: Dictionary of :code:`<string>`.
    :type properties: dict[str, str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'user_type': {'key': 'userType', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'project_memberships': {'key': 'projectMemberships', 'type': '[ProjectMembership]'},
        'properties': {'key': 'properties', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(User, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.user_type = kwargs.get('user_type', None)
        self.role = kwargs.get('role', None)
        self.project_memberships = kwargs.get('project_memberships', None)
        self.properties = kwargs.get('properties', None)


class UserDataResult(msrest.serialization.Model):
    """UserDataResult.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :param data:
    :type data: ~teamcloud.models.User
    :param location:
    :type location: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': 'User'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(UserDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = kwargs.get('data', None)
        self.location = kwargs.get('location', None)


class UserDefinition(msrest.serialization.Model):
    """UserDefinition.

    :param identifier:
    :type identifier: str
    :param role:
    :type role: str
    :param properties: Dictionary of :code:`<string>`.
    :type properties: dict[str, str]
    """

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(UserDefinition, self).__init__(**kwargs)
        self.identifier = kwargs.get('identifier', None)
        self.role = kwargs.get('role', None)
        self.properties = kwargs.get('properties', None)


class UserListDataResult(msrest.serialization.Model):
    """UserListDataResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param code:
    :type code: int
    :param status:
    :type status: str
    :ivar data:
    :vartype data: list[~teamcloud.models.User]
    :param location:
    :type location: str
    """

    _validation = {
        'data': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'data': {'key': 'data', 'type': '[User]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(UserListDataResult, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.status = kwargs.get('status', None)
        self.data = None
        self.location = kwargs.get('location', None)


class ValidationError(msrest.serialization.Model):
    """ValidationError.

    :param field:
    :type field: str
    :param message:
    :type message: str
    """

    _attribute_map = {
        'field': {'key': 'field', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ValidationError, self).__init__(**kwargs)
        self.field = kwargs.get('field', None)
        self.message = kwargs.get('message', None)
