# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class ComponentOfferScope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SYSTEM = "System"
    PROJECT = "Project"
    ALL = "All"

class ComponentOfferType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CUSTOM = "Custom"
    GIT_REPOSITORY = "GitRepository"

class ComponentScope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SYSTEM = "System"
    PROJECT = "Project"
    ALL = "All"

class ComponentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CUSTOM = "Custom"
    GIT_REPOSITORY = "GitRepository"

class ProjectLinkType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LINK = "Link"
    README = "Readme"
    SERVICE = "Service"
    GIT_REPOSITORY = "GitRepository"
    AZURE_RESOURCE = "AzureResource"

class ProjectMembershipRole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    PROVIDER = "Provider"
    MEMBER = "Member"
    OWNER = "Owner"

class ProviderCommandMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SIMPLE = "Simple"
    EXTENDED = "Extended"

class ProviderDataScope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SYSTEM = "System"
    PROJECT = "Project"

class ProviderDataType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PROPERTY = "Property"
    SERVICE = "Service"

class ProviderType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STANDARD = "Standard"
    SERVICE = "Service"
    VIRTUAL = "Virtual"

class ResultErrorCode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "Unknown"
    FAILED = "Failed"
    CONFLICT = "Conflict"
    NOT_FOUND = "NotFound"
    SERVER_ERROR = "ServerError"
    VALIDATION_ERROR = "ValidationError"
    UNAUTHORIZED = "Unauthorized"
    FORBIDDEN = "Forbidden"

class UserRole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    PROVIDER = "Provider"
    CREATOR = "Creator"
    ADMIN = "Admin"

class UserType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    USER = "User"
    SYSTEM = "System"
    PROVIDER = "Provider"
    APPLICATION = "Application"
