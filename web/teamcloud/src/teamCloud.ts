/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { TeamCloudContext } from "./teamCloudContext";
import {
  TeamCloudOptionalParams,
  TeamCloudGetAdaptersResponse,
  TeamCloudGetComponentsOptionalParams,
  TeamCloudGetComponentsResponse,
  TeamCloudCreateComponentOptionalParams,
  TeamCloudCreateComponentResponse,
  TeamCloudGetComponentResponse,
  TeamCloudDeleteComponentResponse,
  TeamCloudGetComponentTasksResponse,
  TeamCloudCreateComponentTaskOptionalParams,
  TeamCloudCreateComponentTaskResponse,
  TeamCloudGetComponentTaskResponse,
  TeamCloudGetComponentTemplatesResponse,
  TeamCloudGetComponentTemplateResponse,
  TeamCloudGetDeploymentScopesResponse,
  TeamCloudCreateDeploymentScopeOptionalParams,
  TeamCloudCreateDeploymentScopeResponse,
  TeamCloudGetDeploymentScopeResponse,
  TeamCloudUpdateDeploymentScopeOptionalParams,
  TeamCloudUpdateDeploymentScopeResponse,
  TeamCloudDeleteDeploymentScopeResponse,
  TeamCloudAuthorizeDeploymentScopeOptionalParams,
  TeamCloudAuthorizeDeploymentScopeResponse,
  TeamCloudGetAuditEntriesOptionalParams,
  TeamCloudGetAuditEntriesResponse,
  TeamCloudGetAuditEntryOptionalParams,
  TeamCloudGetAuditEntryResponse,
  TeamCloudGetAuditCommandsResponse,
  TeamCloudGetOrganizationsResponse,
  TeamCloudCreateOrganizationOptionalParams,
  TeamCloudCreateOrganizationResponse,
  TeamCloudGetOrganizationResponse,
  TeamCloudDeleteOrganizationResponse,
  TeamCloudGetOrganizationUsersResponse,
  TeamCloudCreateOrganizationUserOptionalParams,
  TeamCloudCreateOrganizationUserResponse,
  TeamCloudGetOrganizationUserResponse,
  TeamCloudUpdateOrganizationUserOptionalParams,
  TeamCloudUpdateOrganizationUserResponse,
  TeamCloudDeleteOrganizationUserResponse,
  TeamCloudGetOrganizationUserMeResponse,
  TeamCloudUpdateOrganizationUserMeOptionalParams,
  TeamCloudUpdateOrganizationUserMeResponse,
  TeamCloudGetProjectsResponse,
  TeamCloudCreateProjectOptionalParams,
  TeamCloudCreateProjectResponse,
  TeamCloudGetProjectResponse,
  TeamCloudDeleteProjectResponse,
  TeamCloudGetProjectIdentitiesResponse,
  TeamCloudCreateProjectIdentityOptionalParams,
  TeamCloudCreateProjectIdentityResponse,
  TeamCloudGetProjectIdentityResponse,
  TeamCloudUpdateProjectIdentityOptionalParams,
  TeamCloudUpdateProjectIdentityResponse,
  TeamCloudDeleteProjectIdentityResponse,
  TeamCloudGetProjectTagsResponse,
  TeamCloudCreateProjectTagOptionalParams,
  TeamCloudCreateProjectTagResponse,
  TeamCloudUpdateProjectTagOptionalParams,
  TeamCloudUpdateProjectTagResponse,
  TeamCloudGetProjectTagByKeyResponse,
  TeamCloudDeleteProjectTagResponse,
  TeamCloudGetProjectTemplatesResponse,
  TeamCloudCreateProjectTemplateOptionalParams,
  TeamCloudCreateProjectTemplateResponse,
  TeamCloudGetProjectTemplateResponse,
  TeamCloudUpdateProjectTemplateOptionalParams,
  TeamCloudUpdateProjectTemplateResponse,
  TeamCloudDeleteProjectTemplateResponse,
  TeamCloudGetProjectUsersResponse,
  TeamCloudCreateProjectUserOptionalParams,
  TeamCloudCreateProjectUserResponse,
  TeamCloudGetProjectUserResponse,
  TeamCloudUpdateProjectUserOptionalParams,
  TeamCloudUpdateProjectUserResponse,
  TeamCloudDeleteProjectUserResponse,
  TeamCloudGetProjectUserMeResponse,
  TeamCloudUpdateProjectUserMeOptionalParams,
  TeamCloudUpdateProjectUserMeResponse,
  TeamCloudGetSchedulesResponse,
  TeamCloudCreateScheduleOptionalParams,
  TeamCloudCreateScheduleResponse,
  TeamCloudGetScheduleResponse,
  TeamCloudUpdateScheduleOptionalParams,
  TeamCloudUpdateScheduleResponse,
  TeamCloudRunScheduleResponse,
  TeamCloudGetStatusResponse,
  TeamCloudGetProjectStatusResponse,
  TeamCloudGetUserProjectsResponse,
  TeamCloudGetUserProjectsMeResponse
} from "./models";

export class TeamCloud extends TeamCloudContext {
  /**
   * Initializes a new instance of the TeamCloud class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param $host server parameter
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    $host: string,
    options?: TeamCloudOptionalParams
  ) {
    super(credentials, $host, options);
  }

  /**
   * Gets all Adapters.
   * @param options The options parameters.
   */
  getAdapters(
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetAdaptersResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getAdaptersOperationSpec
    ) as Promise<TeamCloudGetAdaptersResponse>;
  }

  /**
   * Gets all Components for a Project.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getComponents(
    organizationId: string,
    projectId: string,
    options?: TeamCloudGetComponentsOptionalParams
  ): Promise<TeamCloudGetComponentsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getComponentsOperationSpec
    ) as Promise<TeamCloudGetComponentsResponse>;
  }

  /**
   * Creates a new Project Component.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  createComponent(
    organizationId: string,
    projectId: string,
    options?: TeamCloudCreateComponentOptionalParams
  ): Promise<TeamCloudCreateComponentResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      createComponentOperationSpec
    ) as Promise<TeamCloudCreateComponentResponse>;
  }

  /**
   * Gets a Project Component.
   * @param componentId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getComponent(
    componentId: string | null,
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetComponentResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      componentId,
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getComponentOperationSpec
    ) as Promise<TeamCloudGetComponentResponse>;
  }

  /**
   * Deletes an existing Project Component.
   * @param componentId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  deleteComponent(
    componentId: string | null,
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudDeleteComponentResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      componentId,
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      deleteComponentOperationSpec
    ) as Promise<TeamCloudDeleteComponentResponse>;
  }

  /**
   * Gets all Component Tasks.
   * @param organizationId
   * @param projectId
   * @param componentId
   * @param options The options parameters.
   */
  getComponentTasks(
    organizationId: string,
    projectId: string,
    componentId: string | null,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetComponentTasksResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      projectId,
      componentId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getComponentTasksOperationSpec
    ) as Promise<TeamCloudGetComponentTasksResponse>;
  }

  /**
   * Creates a new Project Component Task.
   * @param organizationId
   * @param projectId
   * @param componentId
   * @param options The options parameters.
   */
  createComponentTask(
    organizationId: string,
    projectId: string,
    componentId: string | null,
    options?: TeamCloudCreateComponentTaskOptionalParams
  ): Promise<TeamCloudCreateComponentTaskResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      projectId,
      componentId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      createComponentTaskOperationSpec
    ) as Promise<TeamCloudCreateComponentTaskResponse>;
  }

  /**
   * Gets the Component Task.
   * @param id
   * @param organizationId
   * @param projectId
   * @param componentId
   * @param options The options parameters.
   */
  getComponentTask(
    id: string | null,
    organizationId: string,
    projectId: string,
    componentId: string | null,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetComponentTaskResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      organizationId,
      projectId,
      componentId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getComponentTaskOperationSpec
    ) as Promise<TeamCloudGetComponentTaskResponse>;
  }

  /**
   * Gets all Component Templates for a Project.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getComponentTemplates(
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetComponentTemplatesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getComponentTemplatesOperationSpec
    ) as Promise<TeamCloudGetComponentTemplatesResponse>;
  }

  /**
   * Gets the Component Template.
   * @param id
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getComponentTemplate(
    id: string | null,
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetComponentTemplateResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getComponentTemplateOperationSpec
    ) as Promise<TeamCloudGetComponentTemplateResponse>;
  }

  /**
   * Gets all Deployment Scopes.
   * @param organizationId
   * @param options The options parameters.
   */
  getDeploymentScopes(
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetDeploymentScopesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getDeploymentScopesOperationSpec
    ) as Promise<TeamCloudGetDeploymentScopesResponse>;
  }

  /**
   * Creates a new Deployment Scope.
   * @param organizationId
   * @param options The options parameters.
   */
  createDeploymentScope(
    organizationId: string,
    options?: TeamCloudCreateDeploymentScopeOptionalParams
  ): Promise<TeamCloudCreateDeploymentScopeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      createDeploymentScopeOperationSpec
    ) as Promise<TeamCloudCreateDeploymentScopeResponse>;
  }

  /**
   * Gets a Deployment Scope.
   * @param deploymentScopeId
   * @param organizationId
   * @param options The options parameters.
   */
  getDeploymentScope(
    deploymentScopeId: string | null,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetDeploymentScopeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      deploymentScopeId,
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getDeploymentScopeOperationSpec
    ) as Promise<TeamCloudGetDeploymentScopeResponse>;
  }

  /**
   * Updates an existing Deployment Scope.
   * @param deploymentScopeId
   * @param organizationId
   * @param options The options parameters.
   */
  updateDeploymentScope(
    deploymentScopeId: string | null,
    organizationId: string,
    options?: TeamCloudUpdateDeploymentScopeOptionalParams
  ): Promise<TeamCloudUpdateDeploymentScopeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      deploymentScopeId,
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      updateDeploymentScopeOperationSpec
    ) as Promise<TeamCloudUpdateDeploymentScopeResponse>;
  }

  /**
   * Deletes a Deployment Scope.
   * @param deploymentScopeId
   * @param organizationId
   * @param options The options parameters.
   */
  deleteDeploymentScope(
    deploymentScopeId: string | null,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudDeleteDeploymentScopeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      deploymentScopeId,
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      deleteDeploymentScopeOperationSpec
    ) as Promise<TeamCloudDeleteDeploymentScopeResponse>;
  }

  /**
   * Authorize an existing Deployment Scope.
   * @param deploymentScopeId
   * @param organizationId
   * @param options The options parameters.
   */
  authorizeDeploymentScope(
    deploymentScopeId: string | null,
    organizationId: string,
    options?: TeamCloudAuthorizeDeploymentScopeOptionalParams
  ): Promise<TeamCloudAuthorizeDeploymentScopeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      deploymentScopeId,
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      authorizeDeploymentScopeOperationSpec
    ) as Promise<TeamCloudAuthorizeDeploymentScopeResponse>;
  }

  /**
   * Negotiates the SignalR connection.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  negotiateSignalR(
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      negotiateSignalROperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets all audit entries.
   * @param organizationId
   * @param options The options parameters.
   */
  getAuditEntries(
    organizationId: string,
    options?: TeamCloudGetAuditEntriesOptionalParams
  ): Promise<TeamCloudGetAuditEntriesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getAuditEntriesOperationSpec
    ) as Promise<TeamCloudGetAuditEntriesResponse>;
  }

  /**
   * Gets an audit entry.
   * @param commandId
   * @param organizationId
   * @param options The options parameters.
   */
  getAuditEntry(
    commandId: string,
    organizationId: string,
    options?: TeamCloudGetAuditEntryOptionalParams
  ): Promise<TeamCloudGetAuditEntryResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      commandId,
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getAuditEntryOperationSpec
    ) as Promise<TeamCloudGetAuditEntryResponse>;
  }

  /**
   * Gets all auditable commands.
   * @param organizationId
   * @param options The options parameters.
   */
  getAuditCommands(
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetAuditCommandsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getAuditCommandsOperationSpec
    ) as Promise<TeamCloudGetAuditCommandsResponse>;
  }

  /**
   * Gets all Organizations.
   * @param options The options parameters.
   */
  getOrganizations(
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetOrganizationsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getOrganizationsOperationSpec
    ) as Promise<TeamCloudGetOrganizationsResponse>;
  }

  /**
   * Creates a new Organization.
   * @param options The options parameters.
   */
  createOrganization(
    options?: TeamCloudCreateOrganizationOptionalParams
  ): Promise<TeamCloudCreateOrganizationResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      createOrganizationOperationSpec
    ) as Promise<TeamCloudCreateOrganizationResponse>;
  }

  /**
   * Gets an Organization.
   * @param organizationId
   * @param options The options parameters.
   */
  getOrganization(
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetOrganizationResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getOrganizationOperationSpec
    ) as Promise<TeamCloudGetOrganizationResponse>;
  }

  /**
   * Deletes an existing Organization.
   * @param organizationId
   * @param options The options parameters.
   */
  deleteOrganization(
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudDeleteOrganizationResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      deleteOrganizationOperationSpec
    ) as Promise<TeamCloudDeleteOrganizationResponse>;
  }

  /**
   * Gets all Users.
   * @param organizationId
   * @param options The options parameters.
   */
  getOrganizationUsers(
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetOrganizationUsersResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getOrganizationUsersOperationSpec
    ) as Promise<TeamCloudGetOrganizationUsersResponse>;
  }

  /**
   * Creates a new User.
   * @param organizationId
   * @param options The options parameters.
   */
  createOrganizationUser(
    organizationId: string,
    options?: TeamCloudCreateOrganizationUserOptionalParams
  ): Promise<TeamCloudCreateOrganizationUserResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      createOrganizationUserOperationSpec
    ) as Promise<TeamCloudCreateOrganizationUserResponse>;
  }

  /**
   * Gets a User.
   * @param userId
   * @param organizationId
   * @param options The options parameters.
   */
  getOrganizationUser(
    userId: string | null,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetOrganizationUserResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      userId,
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getOrganizationUserOperationSpec
    ) as Promise<TeamCloudGetOrganizationUserResponse>;
  }

  /**
   * Updates an existing User.
   * @param userId
   * @param organizationId
   * @param options The options parameters.
   */
  updateOrganizationUser(
    userId: string | null,
    organizationId: string,
    options?: TeamCloudUpdateOrganizationUserOptionalParams
  ): Promise<TeamCloudUpdateOrganizationUserResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      userId,
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      updateOrganizationUserOperationSpec
    ) as Promise<TeamCloudUpdateOrganizationUserResponse>;
  }

  /**
   * Deletes an existing User.
   * @param userId
   * @param organizationId
   * @param options The options parameters.
   */
  deleteOrganizationUser(
    userId: string | null,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudDeleteOrganizationUserResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      userId,
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      deleteOrganizationUserOperationSpec
    ) as Promise<TeamCloudDeleteOrganizationUserResponse>;
  }

  /**
   * Gets a User A User matching the current authenticated user.
   * @param organizationId
   * @param options The options parameters.
   */
  getOrganizationUserMe(
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetOrganizationUserMeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getOrganizationUserMeOperationSpec
    ) as Promise<TeamCloudGetOrganizationUserMeResponse>;
  }

  /**
   * Updates an existing User.
   * @param organizationId
   * @param options The options parameters.
   */
  updateOrganizationUserMe(
    organizationId: string,
    options?: TeamCloudUpdateOrganizationUserMeOptionalParams
  ): Promise<TeamCloudUpdateOrganizationUserMeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      updateOrganizationUserMeOperationSpec
    ) as Promise<TeamCloudUpdateOrganizationUserMeResponse>;
  }

  /**
   * Gets all Projects.
   * @param organizationId
   * @param options The options parameters.
   */
  getProjects(
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getProjectsOperationSpec
    ) as Promise<TeamCloudGetProjectsResponse>;
  }

  /**
   * Creates a new Project.
   * @param organizationId
   * @param options The options parameters.
   */
  createProject(
    organizationId: string,
    options?: TeamCloudCreateProjectOptionalParams
  ): Promise<TeamCloudCreateProjectResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      createProjectOperationSpec
    ) as Promise<TeamCloudCreateProjectResponse>;
  }

  /**
   * Gets a Project.
   * @param projectId
   * @param organizationId
   * @param options The options parameters.
   */
  getProject(
    projectId: string,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      projectId,
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getProjectOperationSpec
    ) as Promise<TeamCloudGetProjectResponse>;
  }

  /**
   * Deletes a Project.
   * @param projectId
   * @param organizationId
   * @param options The options parameters.
   */
  deleteProject(
    projectId: string,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudDeleteProjectResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      projectId,
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      deleteProjectOperationSpec
    ) as Promise<TeamCloudDeleteProjectResponse>;
  }

  /**
   * Gets all Project Identities.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectIdentities(
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectIdentitiesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getProjectIdentitiesOperationSpec
    ) as Promise<TeamCloudGetProjectIdentitiesResponse>;
  }

  /**
   * Creates a new Project Identity.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  createProjectIdentity(
    organizationId: string,
    projectId: string,
    options?: TeamCloudCreateProjectIdentityOptionalParams
  ): Promise<TeamCloudCreateProjectIdentityResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      createProjectIdentityOperationSpec
    ) as Promise<TeamCloudCreateProjectIdentityResponse>;
  }

  /**
   * Gets a Project Identity.
   * @param projectIdentityId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectIdentity(
    projectIdentityId: string | null,
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectIdentityResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      projectIdentityId,
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getProjectIdentityOperationSpec
    ) as Promise<TeamCloudGetProjectIdentityResponse>;
  }

  /**
   * Updates an existing Project Identity.
   * @param projectIdentityId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  updateProjectIdentity(
    projectIdentityId: string | null,
    organizationId: string,
    projectId: string,
    options?: TeamCloudUpdateProjectIdentityOptionalParams
  ): Promise<TeamCloudUpdateProjectIdentityResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      projectIdentityId,
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      updateProjectIdentityOperationSpec
    ) as Promise<TeamCloudUpdateProjectIdentityResponse>;
  }

  /**
   * Deletes a Project Identity.
   * @param projectIdentityId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  deleteProjectIdentity(
    projectIdentityId: string | null,
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudDeleteProjectIdentityResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      projectIdentityId,
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      deleteProjectIdentityOperationSpec
    ) as Promise<TeamCloudDeleteProjectIdentityResponse>;
  }

  /**
   * Gets all Tags for a Project.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectTags(
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectTagsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getProjectTagsOperationSpec
    ) as Promise<TeamCloudGetProjectTagsResponse>;
  }

  /**
   * Creates a new Project Tag.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  createProjectTag(
    organizationId: string,
    projectId: string,
    options?: TeamCloudCreateProjectTagOptionalParams
  ): Promise<TeamCloudCreateProjectTagResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      createProjectTagOperationSpec
    ) as Promise<TeamCloudCreateProjectTagResponse>;
  }

  /**
   * Updates an existing Project Tag.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  updateProjectTag(
    organizationId: string,
    projectId: string,
    options?: TeamCloudUpdateProjectTagOptionalParams
  ): Promise<TeamCloudUpdateProjectTagResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      updateProjectTagOperationSpec
    ) as Promise<TeamCloudUpdateProjectTagResponse>;
  }

  /**
   * Gets a Project Tag by Key.
   * @param tagKey
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectTagByKey(
    tagKey: string | null,
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectTagByKeyResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      tagKey,
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getProjectTagByKeyOperationSpec
    ) as Promise<TeamCloudGetProjectTagByKeyResponse>;
  }

  /**
   * Deletes an existing Project Tag.
   * @param tagKey
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  deleteProjectTag(
    tagKey: string | null,
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudDeleteProjectTagResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      tagKey,
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      deleteProjectTagOperationSpec
    ) as Promise<TeamCloudDeleteProjectTagResponse>;
  }

  /**
   * Gets all Project Templates.
   * @param organizationId
   * @param options The options parameters.
   */
  getProjectTemplates(
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectTemplatesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getProjectTemplatesOperationSpec
    ) as Promise<TeamCloudGetProjectTemplatesResponse>;
  }

  /**
   * Creates a new Project Template.
   * @param organizationId
   * @param options The options parameters.
   */
  createProjectTemplate(
    organizationId: string,
    options?: TeamCloudCreateProjectTemplateOptionalParams
  ): Promise<TeamCloudCreateProjectTemplateResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      createProjectTemplateOperationSpec
    ) as Promise<TeamCloudCreateProjectTemplateResponse>;
  }

  /**
   * Gets a Project Template.
   * @param projectTemplateId
   * @param organizationId
   * @param options The options parameters.
   */
  getProjectTemplate(
    projectTemplateId: string | null,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectTemplateResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      projectTemplateId,
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getProjectTemplateOperationSpec
    ) as Promise<TeamCloudGetProjectTemplateResponse>;
  }

  /**
   * Updates an existing Project Template.
   * @param projectTemplateId
   * @param organizationId
   * @param options The options parameters.
   */
  updateProjectTemplate(
    projectTemplateId: string | null,
    organizationId: string,
    options?: TeamCloudUpdateProjectTemplateOptionalParams
  ): Promise<TeamCloudUpdateProjectTemplateResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      projectTemplateId,
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      updateProjectTemplateOperationSpec
    ) as Promise<TeamCloudUpdateProjectTemplateResponse>;
  }

  /**
   * Deletes a Project Template.
   * @param projectTemplateId
   * @param organizationId
   * @param options The options parameters.
   */
  deleteProjectTemplate(
    projectTemplateId: string | null,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudDeleteProjectTemplateResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      projectTemplateId,
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      deleteProjectTemplateOperationSpec
    ) as Promise<TeamCloudDeleteProjectTemplateResponse>;
  }

  /**
   * Gets all Users for a Project.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectUsers(
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectUsersResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getProjectUsersOperationSpec
    ) as Promise<TeamCloudGetProjectUsersResponse>;
  }

  /**
   * Creates a new Project User
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  createProjectUser(
    organizationId: string,
    projectId: string,
    options?: TeamCloudCreateProjectUserOptionalParams
  ): Promise<TeamCloudCreateProjectUserResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      createProjectUserOperationSpec
    ) as Promise<TeamCloudCreateProjectUserResponse>;
  }

  /**
   * Gets a Project User by ID or email address.
   * @param userId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectUser(
    userId: string | null,
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectUserResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      userId,
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getProjectUserOperationSpec
    ) as Promise<TeamCloudGetProjectUserResponse>;
  }

  /**
   * Updates an existing Project User.
   * @param userId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  updateProjectUser(
    userId: string | null,
    organizationId: string,
    projectId: string,
    options?: TeamCloudUpdateProjectUserOptionalParams
  ): Promise<TeamCloudUpdateProjectUserResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      userId,
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      updateProjectUserOperationSpec
    ) as Promise<TeamCloudUpdateProjectUserResponse>;
  }

  /**
   * Deletes an existing Project User.
   * @param userId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  deleteProjectUser(
    userId: string | null,
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudDeleteProjectUserResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      userId,
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      deleteProjectUserOperationSpec
    ) as Promise<TeamCloudDeleteProjectUserResponse>;
  }

  /**
   * Gets a Project User for the calling user.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectUserMe(
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectUserMeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getProjectUserMeOperationSpec
    ) as Promise<TeamCloudGetProjectUserMeResponse>;
  }

  /**
   * Updates an existing Project User.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  updateProjectUserMe(
    organizationId: string,
    projectId: string,
    options?: TeamCloudUpdateProjectUserMeOptionalParams
  ): Promise<TeamCloudUpdateProjectUserMeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      updateProjectUserMeOperationSpec
    ) as Promise<TeamCloudUpdateProjectUserMeResponse>;
  }

  /**
   * Gets all Schedule.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getSchedules(
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetSchedulesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getSchedulesOperationSpec
    ) as Promise<TeamCloudGetSchedulesResponse>;
  }

  /**
   * Creates a new Project Schedule.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  createSchedule(
    organizationId: string,
    projectId: string,
    options?: TeamCloudCreateScheduleOptionalParams
  ): Promise<TeamCloudCreateScheduleResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      createScheduleOperationSpec
    ) as Promise<TeamCloudCreateScheduleResponse>;
  }

  /**
   * Gets the Schedule.
   * @param scheduleId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getSchedule(
    scheduleId: string | null,
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetScheduleResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      scheduleId,
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getScheduleOperationSpec
    ) as Promise<TeamCloudGetScheduleResponse>;
  }

  /**
   * Updates a Project Schedule.
   * @param scheduleId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  updateSchedule(
    scheduleId: string | null,
    organizationId: string,
    projectId: string,
    options?: TeamCloudUpdateScheduleOptionalParams
  ): Promise<TeamCloudUpdateScheduleResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      scheduleId,
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      updateScheduleOperationSpec
    ) as Promise<TeamCloudUpdateScheduleResponse>;
  }

  /**
   * Runs a Project Schedule.
   * @param scheduleId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  runSchedule(
    scheduleId: string | null,
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudRunScheduleResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      scheduleId,
      organizationId,
      projectId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      runScheduleOperationSpec
    ) as Promise<TeamCloudRunScheduleResponse>;
  }

  /**
   * Gets the status of a long-running operation.
   * @param trackingId
   * @param organizationId
   * @param options The options parameters.
   */
  getStatus(
    trackingId: string,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetStatusResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      trackingId,
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getStatusOperationSpec
    ) as Promise<TeamCloudGetStatusResponse>;
  }

  /**
   * Gets the status of a long-running operation.
   * @param projectId
   * @param trackingId
   * @param organizationId
   * @param options The options parameters.
   */
  getProjectStatus(
    projectId: string,
    trackingId: string,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectStatusResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      projectId,
      trackingId,
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getProjectStatusOperationSpec
    ) as Promise<TeamCloudGetProjectStatusResponse>;
  }

  /**
   * Gets all Projects for a User.
   * @param organizationId
   * @param userId
   * @param options The options parameters.
   */
  getUserProjects(
    organizationId: string,
    userId: string | null,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetUserProjectsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      userId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getUserProjectsOperationSpec
    ) as Promise<TeamCloudGetUserProjectsResponse>;
  }

  /**
   * Gets all Projects for a User.
   * @param organizationId
   * @param options The options parameters.
   */
  getUserProjectsMe(
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetUserProjectsMeResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      organizationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getUserProjectsMeOperationSpec
    ) as Promise<TeamCloudGetUserProjectsMeResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getAdaptersOperationSpec: coreHttp.OperationSpec = {
  path: "/adapters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AdapterInformationListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getComponentsOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/components",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  queryParameters: [Parameters.deleted],
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createComponentOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/components",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ComponentDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getComponentOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteComponentOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    204: {
      bodyMapper: Mappers.ComponentDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getComponentTasksOperationSpec: coreHttp.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentTaskListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createComponentTaskOperationSpec: coreHttp.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ComponentTaskDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body1,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getComponentTaskOperationSpec: coreHttp.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentTaskDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId,
    Parameters.id
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getComponentTemplatesOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/templates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentTemplateListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getComponentTemplateOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/templates/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.id
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getDeploymentScopesOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/scopes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentScopeListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createDeploymentScopeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/scopes",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body2,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDeploymentScopeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/scopes/{deploymentScopeId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.deploymentScopeId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateDeploymentScopeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/scopes/{deploymentScopeId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body3,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.deploymentScopeId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteDeploymentScopeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/scopes/{deploymentScopeId}",
  httpMethod: "DELETE",
  responses: {
    204: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.deploymentScopeId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const authorizeDeploymentScopeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/scopes/{deploymentScopeId}/authorize",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body3,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.deploymentScopeId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const negotiateSignalROperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/negotiate",
  httpMethod: "POST",
  responses: { 200: {}, 401: {}, 403: {} },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  serializer
};
const getAuditEntriesOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/audit",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommandAuditEntityListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  queryParameters: [Parameters.timeRange, Parameters.commands],
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAuditEntryOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/audit/{commandId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommandAuditEntityDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  queryParameters: [Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.commandId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAuditCommandsOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/audit/commands",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StringListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOrganizationsOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OrganizationListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrganizationOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.OrganizationDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body4,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOrganizationOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OrganizationDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOrganizationOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOrganizationUsersOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/users",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrganizationUserOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/users",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body5,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOrganizationUserOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/users/{userId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOrganizationUserOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/users/{userId}",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body6,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOrganizationUserOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/users/{userId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOrganizationUserMeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/me",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOrganizationUserMeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/me",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body6,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectsOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ProjectDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body7,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteProjectOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectIdentitiesOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/identities",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectIdentityListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectIdentityOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/identities",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ProjectIdentityDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body8,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectIdentityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/identities/{projectIdentityId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectIdentityDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.projectIdentityId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateProjectIdentityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/identities/{projectIdentityId}",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body9,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.projectIdentityId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteProjectIdentityOperationSpec: coreHttp.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/identities/{projectIdentityId}",
  httpMethod: "DELETE",
  responses: {
    204: {
      bodyMapper: Mappers.ProjectIdentityDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.projectIdentityId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectTagsOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionaryDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectTagOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body10,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateProjectTagOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body10,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectTagByKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags/{tagKey}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionaryDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.tagKey
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteProjectTagOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags/{tagKey}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.tagKey
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectTemplatesOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/templates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectTemplateListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectTemplateOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/templates",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ProjectTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body11,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectTemplateOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/templates/{projectTemplateId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectTemplateId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateProjectTemplateOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/templates/{projectTemplateId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body12,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectTemplateId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteProjectTemplateOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/templates/{projectTemplateId}",
  httpMethod: "DELETE",
  responses: {
    204: {
      bodyMapper: Mappers.ProjectTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectTemplateId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectUsersOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectUserOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.UserDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body5,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectUserOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateProjectUserOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body6,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteProjectUserOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectUserMeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/me",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateProjectUserMeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/me",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body6,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getSchedulesOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/schedules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduleListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createScheduleOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/schedules",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ScheduleDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body13,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getScheduleOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/schedules/{scheduleId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduleDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.scheduleId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateScheduleOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/schedules/{scheduleId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduleDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body14,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.scheduleId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const runScheduleOperationSpec: coreHttp.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/schedules/{scheduleId}/run",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduleDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.scheduleId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/status/{trackingId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StatusResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    302: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.trackingId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/status/{trackingId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StatusResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    302: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.trackingId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getUserProjectsOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/users/{userId}/projects",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getUserProjectsMeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/me/projects",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
