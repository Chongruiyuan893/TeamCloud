/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { TeamCloudContext } from "./teamCloudContext";
import {
  TeamCloudOptionalParams,
  TeamCloudGetComponentsOptionalParams,
  TeamCloudGetComponentsResponse,
  TeamCloudCreateComponentOptionalParams,
  TeamCloudCreateComponentResponse,
  TeamCloudGetComponentResponse,
  TeamCloudDeleteComponentResponse,
  TeamCloudGetComponentTasksResponse,
  TeamCloudCreateComponentTaskOptionalParams,
  TeamCloudCreateComponentTaskResponse,
  TeamCloudGetComponentTaskResponse,
  TeamCloudGetComponentTemplatesResponse,
  TeamCloudGetComponentTemplateResponse,
  TeamCloudGetDeploymentScopesResponse,
  TeamCloudCreateDeploymentScopeOptionalParams,
  TeamCloudCreateDeploymentScopeResponse,
  TeamCloudGetDeploymentScopeResponse,
  TeamCloudUpdateDeploymentScopeOptionalParams,
  TeamCloudUpdateDeploymentScopeResponse,
  TeamCloudDeleteDeploymentScopeResponse,
  TeamCloudGetOrganizationsResponse,
  TeamCloudCreateOrganizationOptionalParams,
  TeamCloudCreateOrganizationResponse,
  TeamCloudGetOrganizationResponse,
  TeamCloudDeleteOrganizationResponse,
  TeamCloudGetOrganizationUsersResponse,
  TeamCloudCreateOrganizationUserOptionalParams,
  TeamCloudCreateOrganizationUserResponse,
  TeamCloudGetOrganizationUserResponse,
  TeamCloudUpdateOrganizationUserOptionalParams,
  TeamCloudUpdateOrganizationUserResponse,
  TeamCloudDeleteOrganizationUserResponse,
  TeamCloudGetOrganizationUserMeResponse,
  TeamCloudUpdateOrganizationUserMeOptionalParams,
  TeamCloudUpdateOrganizationUserMeResponse,
  TeamCloudGetProjectsResponse,
  TeamCloudCreateProjectOptionalParams,
  TeamCloudCreateProjectResponse,
  TeamCloudGetProjectResponse,
  TeamCloudDeleteProjectResponse,
  TeamCloudGetProjectTagsResponse,
  TeamCloudCreateProjectTagOptionalParams,
  TeamCloudCreateProjectTagResponse,
  TeamCloudUpdateProjectTagOptionalParams,
  TeamCloudUpdateProjectTagResponse,
  TeamCloudGetProjectTagByKeyResponse,
  TeamCloudDeleteProjectTagResponse,
  TeamCloudGetProjectTemplatesResponse,
  TeamCloudCreateProjectTemplateOptionalParams,
  TeamCloudCreateProjectTemplateResponse,
  TeamCloudGetProjectTemplateResponse,
  TeamCloudUpdateProjectTemplateOptionalParams,
  TeamCloudUpdateProjectTemplateResponse,
  TeamCloudDeleteProjectTemplateResponse,
  TeamCloudGetProjectUsersResponse,
  TeamCloudCreateProjectUserOptionalParams,
  TeamCloudCreateProjectUserResponse,
  TeamCloudGetProjectUserResponse,
  TeamCloudUpdateProjectUserOptionalParams,
  TeamCloudUpdateProjectUserResponse,
  TeamCloudDeleteProjectUserResponse,
  TeamCloudGetProjectUserMeResponse,
  TeamCloudUpdateProjectUserMeOptionalParams,
  TeamCloudUpdateProjectUserMeResponse,
  TeamCloudGetStatusResponse,
  TeamCloudGetProjectStatusResponse,
  TeamCloudGetUserProjectsResponse,
  TeamCloudGetUserProjectsMeResponse
} from "./models";

export class TeamCloud extends TeamCloudContext {
  /**
   * Initializes a new instance of the TeamCloud class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param $host server parameter
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    $host: string,
    options?: TeamCloudOptionalParams
  ) {
    super(credentials, $host, options);
  }

  /**
   * Gets all Components for a Project.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getComponents(
    organizationId: string,
    projectId: string,
    options?: TeamCloudGetComponentsOptionalParams
  ): Promise<TeamCloudGetComponentsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, projectId, options: operationOptions },
      getComponentsOperationSpec
    ) as Promise<TeamCloudGetComponentsResponse>;
  }

  /**
   * Creates a new Project Component.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  createComponent(
    organizationId: string,
    projectId: string,
    options?: TeamCloudCreateComponentOptionalParams
  ): Promise<TeamCloudCreateComponentResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, projectId, options: operationOptions },
      createComponentOperationSpec
    ) as Promise<TeamCloudCreateComponentResponse>;
  }

  /**
   * Gets a Project Component.
   * @param id
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getComponent(
    id: string | null,
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetComponentResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { id, organizationId, projectId, options: operationOptions },
      getComponentOperationSpec
    ) as Promise<TeamCloudGetComponentResponse>;
  }

  /**
   * Deletes an existing Project Component.
   * @param id
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  deleteComponent(
    id: string | null,
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudDeleteComponentResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { id, organizationId, projectId, options: operationOptions },
      deleteComponentOperationSpec
    ) as Promise<TeamCloudDeleteComponentResponse>;
  }

  /**
   * Gets all Component Tasks.
   * @param organizationId
   * @param projectId
   * @param componentId
   * @param options The options parameters.
   */
  getComponentTasks(
    organizationId: string,
    projectId: string,
    componentId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetComponentTasksResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, projectId, componentId, options: operationOptions },
      getComponentTasksOperationSpec
    ) as Promise<TeamCloudGetComponentTasksResponse>;
  }

  /**
   * Creates a new Project Component Task.
   * @param organizationId
   * @param projectId
   * @param componentId
   * @param options The options parameters.
   */
  createComponentTask(
    organizationId: string,
    projectId: string,
    componentId: string,
    options?: TeamCloudCreateComponentTaskOptionalParams
  ): Promise<TeamCloudCreateComponentTaskResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, projectId, componentId, options: operationOptions },
      createComponentTaskOperationSpec
    ) as Promise<TeamCloudCreateComponentTaskResponse>;
  }

  /**
   * Gets the Component Task.
   * @param id
   * @param organizationId
   * @param projectId
   * @param componentId
   * @param options The options parameters.
   */
  getComponentTask(
    id: string | null,
    organizationId: string,
    projectId: string,
    componentId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetComponentTaskResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { id, organizationId, projectId, componentId, options: operationOptions },
      getComponentTaskOperationSpec
    ) as Promise<TeamCloudGetComponentTaskResponse>;
  }

  /**
   * Gets all Component Templates for a Project.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getComponentTemplates(
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetComponentTemplatesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, projectId, options: operationOptions },
      getComponentTemplatesOperationSpec
    ) as Promise<TeamCloudGetComponentTemplatesResponse>;
  }

  /**
   * Gets the Component Template.
   * @param id
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getComponentTemplate(
    id: string | null,
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetComponentTemplateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { id, organizationId, projectId, options: operationOptions },
      getComponentTemplateOperationSpec
    ) as Promise<TeamCloudGetComponentTemplateResponse>;
  }

  /**
   * Gets all Deployment Scopes.
   * @param organizationId
   * @param options The options parameters.
   */
  getDeploymentScopes(
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetDeploymentScopesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, options: operationOptions },
      getDeploymentScopesOperationSpec
    ) as Promise<TeamCloudGetDeploymentScopesResponse>;
  }

  /**
   * Creates a new Deployment Scope.
   * @param organizationId
   * @param options The options parameters.
   */
  createDeploymentScope(
    organizationId: string,
    options?: TeamCloudCreateDeploymentScopeOptionalParams
  ): Promise<TeamCloudCreateDeploymentScopeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, options: operationOptions },
      createDeploymentScopeOperationSpec
    ) as Promise<TeamCloudCreateDeploymentScopeResponse>;
  }

  /**
   * Gets a Deployment Scope.
   * @param id
   * @param organizationId
   * @param options The options parameters.
   */
  getDeploymentScope(
    id: string | null,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetDeploymentScopeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { id, organizationId, options: operationOptions },
      getDeploymentScopeOperationSpec
    ) as Promise<TeamCloudGetDeploymentScopeResponse>;
  }

  /**
   * Updates an existing Deployment Scope.
   * @param id
   * @param organizationId
   * @param options The options parameters.
   */
  updateDeploymentScope(
    id: string | null,
    organizationId: string,
    options?: TeamCloudUpdateDeploymentScopeOptionalParams
  ): Promise<TeamCloudUpdateDeploymentScopeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { id, organizationId, options: operationOptions },
      updateDeploymentScopeOperationSpec
    ) as Promise<TeamCloudUpdateDeploymentScopeResponse>;
  }

  /**
   * Deletes a Deployment Scope.
   * @param id
   * @param organizationId
   * @param options The options parameters.
   */
  deleteDeploymentScope(
    id: string | null,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudDeleteDeploymentScopeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { id, organizationId, options: operationOptions },
      deleteDeploymentScopeOperationSpec
    ) as Promise<TeamCloudDeleteDeploymentScopeResponse>;
  }

  /**
   * Gets all Organizations.
   * @param options The options parameters.
   */
  getOrganizations(
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetOrganizationsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      getOrganizationsOperationSpec
    ) as Promise<TeamCloudGetOrganizationsResponse>;
  }

  /**
   * Creates a new Organization.
   * @param options The options parameters.
   */
  createOrganization(
    options?: TeamCloudCreateOrganizationOptionalParams
  ): Promise<TeamCloudCreateOrganizationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      createOrganizationOperationSpec
    ) as Promise<TeamCloudCreateOrganizationResponse>;
  }

  /**
   * Gets an Organization.
   * @param org
   * @param organizationId
   * @param options The options parameters.
   */
  getOrganization(
    org: string | null,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetOrganizationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { org, organizationId, options: operationOptions },
      getOrganizationOperationSpec
    ) as Promise<TeamCloudGetOrganizationResponse>;
  }

  /**
   * Deletes an existing Organization.
   * @param organizationId
   * @param options The options parameters.
   */
  deleteOrganization(
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudDeleteOrganizationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, options: operationOptions },
      deleteOrganizationOperationSpec
    ) as Promise<TeamCloudDeleteOrganizationResponse>;
  }

  /**
   * Gets all Users.
   * @param organizationId
   * @param options The options parameters.
   */
  getOrganizationUsers(
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetOrganizationUsersResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, options: operationOptions },
      getOrganizationUsersOperationSpec
    ) as Promise<TeamCloudGetOrganizationUsersResponse>;
  }

  /**
   * Creates a new User.
   * @param organizationId
   * @param options The options parameters.
   */
  createOrganizationUser(
    organizationId: string,
    options?: TeamCloudCreateOrganizationUserOptionalParams
  ): Promise<TeamCloudCreateOrganizationUserResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, options: operationOptions },
      createOrganizationUserOperationSpec
    ) as Promise<TeamCloudCreateOrganizationUserResponse>;
  }

  /**
   * Gets a User.
   * @param userId
   * @param organizationId
   * @param options The options parameters.
   */
  getOrganizationUser(
    userId: string | null,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetOrganizationUserResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { userId, organizationId, options: operationOptions },
      getOrganizationUserOperationSpec
    ) as Promise<TeamCloudGetOrganizationUserResponse>;
  }

  /**
   * Updates an existing User.
   * @param userId
   * @param organizationId
   * @param options The options parameters.
   */
  updateOrganizationUser(
    userId: string | null,
    organizationId: string,
    options?: TeamCloudUpdateOrganizationUserOptionalParams
  ): Promise<TeamCloudUpdateOrganizationUserResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { userId, organizationId, options: operationOptions },
      updateOrganizationUserOperationSpec
    ) as Promise<TeamCloudUpdateOrganizationUserResponse>;
  }

  /**
   * Deletes an existing User.
   * @param userId
   * @param organizationId
   * @param options The options parameters.
   */
  deleteOrganizationUser(
    userId: string | null,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudDeleteOrganizationUserResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { userId, organizationId, options: operationOptions },
      deleteOrganizationUserOperationSpec
    ) as Promise<TeamCloudDeleteOrganizationUserResponse>;
  }

  /**
   * Gets a User A User matching the current authenticated user.
   * @param organizationId
   * @param options The options parameters.
   */
  getOrganizationUserMe(
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetOrganizationUserMeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, options: operationOptions },
      getOrganizationUserMeOperationSpec
    ) as Promise<TeamCloudGetOrganizationUserMeResponse>;
  }

  /**
   * Updates an existing User.
   * @param organizationId
   * @param options The options parameters.
   */
  updateOrganizationUserMe(
    organizationId: string,
    options?: TeamCloudUpdateOrganizationUserMeOptionalParams
  ): Promise<TeamCloudUpdateOrganizationUserMeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, options: operationOptions },
      updateOrganizationUserMeOperationSpec
    ) as Promise<TeamCloudUpdateOrganizationUserMeResponse>;
  }

  /**
   * Gets all Projects.
   * @param organizationId
   * @param options The options parameters.
   */
  getProjects(
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, options: operationOptions },
      getProjectsOperationSpec
    ) as Promise<TeamCloudGetProjectsResponse>;
  }

  /**
   * Creates a new Project.
   * @param organizationId
   * @param options The options parameters.
   */
  createProject(
    organizationId: string,
    options?: TeamCloudCreateProjectOptionalParams
  ): Promise<TeamCloudCreateProjectResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, options: operationOptions },
      createProjectOperationSpec
    ) as Promise<TeamCloudCreateProjectResponse>;
  }

  /**
   * Gets a Project.
   * @param projectId
   * @param organizationId
   * @param options The options parameters.
   */
  getProject(
    projectId: string,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { projectId, organizationId, options: operationOptions },
      getProjectOperationSpec
    ) as Promise<TeamCloudGetProjectResponse>;
  }

  /**
   * Deletes a Project.
   * @param projectId
   * @param organizationId
   * @param options The options parameters.
   */
  deleteProject(
    projectId: string,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudDeleteProjectResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { projectId, organizationId, options: operationOptions },
      deleteProjectOperationSpec
    ) as Promise<TeamCloudDeleteProjectResponse>;
  }

  /**
   * Gets all Tags for a Project.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectTags(
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectTagsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, projectId, options: operationOptions },
      getProjectTagsOperationSpec
    ) as Promise<TeamCloudGetProjectTagsResponse>;
  }

  /**
   * Creates a new Project Tag.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  createProjectTag(
    organizationId: string,
    projectId: string,
    options?: TeamCloudCreateProjectTagOptionalParams
  ): Promise<TeamCloudCreateProjectTagResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, projectId, options: operationOptions },
      createProjectTagOperationSpec
    ) as Promise<TeamCloudCreateProjectTagResponse>;
  }

  /**
   * Updates an existing Project Tag.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  updateProjectTag(
    organizationId: string,
    projectId: string,
    options?: TeamCloudUpdateProjectTagOptionalParams
  ): Promise<TeamCloudUpdateProjectTagResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, projectId, options: operationOptions },
      updateProjectTagOperationSpec
    ) as Promise<TeamCloudUpdateProjectTagResponse>;
  }

  /**
   * Gets a Project Tag by Key.
   * @param tagKey
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectTagByKey(
    tagKey: string | null,
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectTagByKeyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { tagKey, organizationId, projectId, options: operationOptions },
      getProjectTagByKeyOperationSpec
    ) as Promise<TeamCloudGetProjectTagByKeyResponse>;
  }

  /**
   * Deletes an existing Project Tag.
   * @param tagKey
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  deleteProjectTag(
    tagKey: string | null,
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudDeleteProjectTagResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { tagKey, organizationId, projectId, options: operationOptions },
      deleteProjectTagOperationSpec
    ) as Promise<TeamCloudDeleteProjectTagResponse>;
  }

  /**
   * Gets all Project Templates.
   * @param organizationId
   * @param options The options parameters.
   */
  getProjectTemplates(
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectTemplatesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, options: operationOptions },
      getProjectTemplatesOperationSpec
    ) as Promise<TeamCloudGetProjectTemplatesResponse>;
  }

  /**
   * Creates a new Project Template.
   * @param organizationId
   * @param options The options parameters.
   */
  createProjectTemplate(
    organizationId: string,
    options?: TeamCloudCreateProjectTemplateOptionalParams
  ): Promise<TeamCloudCreateProjectTemplateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, options: operationOptions },
      createProjectTemplateOperationSpec
    ) as Promise<TeamCloudCreateProjectTemplateResponse>;
  }

  /**
   * Gets a Project Template.
   * @param projectTemplateId
   * @param organizationId
   * @param options The options parameters.
   */
  getProjectTemplate(
    projectTemplateId: string | null,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectTemplateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { projectTemplateId, organizationId, options: operationOptions },
      getProjectTemplateOperationSpec
    ) as Promise<TeamCloudGetProjectTemplateResponse>;
  }

  /**
   * Updates an existing Project Template.
   * @param projectTemplateId
   * @param organizationId
   * @param options The options parameters.
   */
  updateProjectTemplate(
    projectTemplateId: string | null,
    organizationId: string,
    options?: TeamCloudUpdateProjectTemplateOptionalParams
  ): Promise<TeamCloudUpdateProjectTemplateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { projectTemplateId, organizationId, options: operationOptions },
      updateProjectTemplateOperationSpec
    ) as Promise<TeamCloudUpdateProjectTemplateResponse>;
  }

  /**
   * Deletes a Project Template.
   * @param projectTemplateId
   * @param organizationId
   * @param options The options parameters.
   */
  deleteProjectTemplate(
    projectTemplateId: string | null,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudDeleteProjectTemplateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { projectTemplateId, organizationId, options: operationOptions },
      deleteProjectTemplateOperationSpec
    ) as Promise<TeamCloudDeleteProjectTemplateResponse>;
  }

  /**
   * Gets all Users for a Project.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectUsers(
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectUsersResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, projectId, options: operationOptions },
      getProjectUsersOperationSpec
    ) as Promise<TeamCloudGetProjectUsersResponse>;
  }

  /**
   * Creates a new Project User
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  createProjectUser(
    organizationId: string,
    projectId: string,
    options?: TeamCloudCreateProjectUserOptionalParams
  ): Promise<TeamCloudCreateProjectUserResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, projectId, options: operationOptions },
      createProjectUserOperationSpec
    ) as Promise<TeamCloudCreateProjectUserResponse>;
  }

  /**
   * Gets a Project User by ID or email address.
   * @param userId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectUser(
    userId: string | null,
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectUserResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { userId, organizationId, projectId, options: operationOptions },
      getProjectUserOperationSpec
    ) as Promise<TeamCloudGetProjectUserResponse>;
  }

  /**
   * Updates an existing Project User.
   * @param userId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  updateProjectUser(
    userId: string | null,
    organizationId: string,
    projectId: string,
    options?: TeamCloudUpdateProjectUserOptionalParams
  ): Promise<TeamCloudUpdateProjectUserResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { userId, organizationId, projectId, options: operationOptions },
      updateProjectUserOperationSpec
    ) as Promise<TeamCloudUpdateProjectUserResponse>;
  }

  /**
   * Deletes an existing Project User.
   * @param userId
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  deleteProjectUser(
    userId: string | null,
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudDeleteProjectUserResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { userId, organizationId, projectId, options: operationOptions },
      deleteProjectUserOperationSpec
    ) as Promise<TeamCloudDeleteProjectUserResponse>;
  }

  /**
   * Gets a Project User for the calling user.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  getProjectUserMe(
    organizationId: string,
    projectId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectUserMeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, projectId, options: operationOptions },
      getProjectUserMeOperationSpec
    ) as Promise<TeamCloudGetProjectUserMeResponse>;
  }

  /**
   * Updates an existing Project User.
   * @param organizationId
   * @param projectId
   * @param options The options parameters.
   */
  updateProjectUserMe(
    organizationId: string,
    projectId: string,
    options?: TeamCloudUpdateProjectUserMeOptionalParams
  ): Promise<TeamCloudUpdateProjectUserMeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, projectId, options: operationOptions },
      updateProjectUserMeOperationSpec
    ) as Promise<TeamCloudUpdateProjectUserMeResponse>;
  }

  /**
   * Gets the status of a long-running operation.
   * @param trackingId
   * @param organizationId
   * @param options The options parameters.
   */
  getStatus(
    trackingId: string,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { trackingId, organizationId, options: operationOptions },
      getStatusOperationSpec
    ) as Promise<TeamCloudGetStatusResponse>;
  }

  /**
   * Gets the status of a long-running operation.
   * @param projectId
   * @param trackingId
   * @param organizationId
   * @param options The options parameters.
   */
  getProjectStatus(
    projectId: string,
    trackingId: string,
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetProjectStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { projectId, trackingId, organizationId, options: operationOptions },
      getProjectStatusOperationSpec
    ) as Promise<TeamCloudGetProjectStatusResponse>;
  }

  /**
   * Gets all Projects for a User.
   * @param organizationId
   * @param userId
   * @param options The options parameters.
   */
  getUserProjects(
    organizationId: string,
    userId: string | null,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetUserProjectsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, userId, options: operationOptions },
      getUserProjectsOperationSpec
    ) as Promise<TeamCloudGetUserProjectsResponse>;
  }

  /**
   * Gets all Projects for a User.
   * @param organizationId
   * @param options The options parameters.
   */
  getUserProjectsMe(
    organizationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<TeamCloudGetUserProjectsMeResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { organizationId, options: operationOptions },
      getUserProjectsMeOperationSpec
    ) as Promise<TeamCloudGetUserProjectsMeResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getComponentsOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/components",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  queryParameters: [Parameters.deleted],
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createComponentOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/components",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ComponentDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getComponentOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/components/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.id
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteComponentOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/components/{id}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    204: {
      bodyMapper: Mappers.ComponentDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.id
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getComponentTasksOperationSpec: coreHttp.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentTaskListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createComponentTaskOperationSpec: coreHttp.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ComponentTaskDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body1,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.componentId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getComponentTaskOperationSpec: coreHttp.OperationSpec = {
  path:
    "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentTaskDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.id,
    Parameters.componentId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getComponentTemplatesOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/templates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentTemplateListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getComponentTemplateOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/templates/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.id
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getDeploymentScopesOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/scopes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentScopeListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createDeploymentScopeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/scopes",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body2,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDeploymentScopeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/scopes/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const updateDeploymentScopeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/scopes/{id}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body3,
  urlParameters: [Parameters.$host, Parameters.organizationId, Parameters.id],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteDeploymentScopeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/scopes/{id}",
  httpMethod: "DELETE",
  responses: {
    204: {
      bodyMapper: Mappers.DeploymentScopeDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const getOrganizationsOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OrganizationListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrganizationOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.OrganizationDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body4,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOrganizationOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OrganizationDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId, Parameters.org],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOrganizationOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOrganizationUsersOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/users",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrganizationUserOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/users",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body5,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOrganizationUserOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/users/{userId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOrganizationUserOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/users/{userId}",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body6,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOrganizationUserOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/users/{userId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOrganizationUserMeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/me",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOrganizationUserMeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/me",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body6,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectsOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ProjectDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body7,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteProjectOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectTagsOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionaryDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectTagOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body8,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateProjectTagOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body8,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectTagByKeyOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags/{tagKey}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionaryDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.tagKey
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteProjectTagOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/tags/{tagKey}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.tagKey
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectTemplatesOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/templates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectTemplateListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {}
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectTemplateOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/templates",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ProjectTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body9,
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectTemplateOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/templates/{projectTemplateId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectTemplateId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateProjectTemplateOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/templates/{projectTemplateId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body10,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectTemplateId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteProjectTemplateOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/templates/{projectTemplateId}",
  httpMethod: "DELETE",
  responses: {
    204: {
      bodyMapper: Mappers.ProjectTemplateDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectTemplateId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectUsersOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createProjectUserOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.UserDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    },
    409: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body5,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProjectUserOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateProjectUserOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body6,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteProjectUserOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectUserMeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/me",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateProjectUserMeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/users/me",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.UserDataResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  requestBody: Parameters.body6,
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/status/{trackingId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StatusResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    302: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.trackingId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProjectStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/projects/{projectId}/status/{trackingId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StatusResult
    },
    202: {
      bodyMapper: Mappers.StatusResult
    },
    302: {
      bodyMapper: Mappers.StatusResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.projectId,
    Parameters.trackingId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getUserProjectsOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/users/{userId}/projects",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.organizationId,
    Parameters.userId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getUserProjectsMeOperationSpec: coreHttp.OperationSpec = {
  path: "/orgs/{organizationId}/me/projects",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectListDataResult
    },
    400: {
      bodyMapper: Mappers.ErrorResult
    },
    401: {},
    403: {},
    404: {
      bodyMapper: Mappers.ErrorResult
    }
  },
  urlParameters: [Parameters.$host, Parameters.organizationId],
  headerParameters: [Parameters.accept],
  serializer
};
