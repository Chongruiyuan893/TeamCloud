/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __extends } from "tslib";
import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { TeamCloudContext } from "./teamCloudContext";
var TeamCloud = /** @class */ (function (_super) {
    __extends(TeamCloud, _super);
    /**
     * Initializes a new instance of the TeamCloud class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param $host server parameter
     * @param options The parameter options
     */
    function TeamCloud(credentials, $host, options) {
        return _super.call(this, credentials, $host, options) || this;
    }
    /**
     * Gets all Components for a Project.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getComponents = function (organizationId, projectId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, projectId: projectId, options: operationOptions }, getComponentsOperationSpec);
    };
    /**
     * Creates a new Project Component.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    TeamCloud.prototype.createComponent = function (organizationId, projectId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, projectId: projectId, options: operationOptions }, createComponentOperationSpec);
    };
    /**
     * Gets a Project Component.
     * @param id
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getComponent = function (id, organizationId, projectId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ id: id, organizationId: organizationId, projectId: projectId, options: operationOptions }, getComponentOperationSpec);
    };
    /**
     * Deletes an existing Project Component.
     * @param id
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    TeamCloud.prototype.deleteComponent = function (id, organizationId, projectId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ id: id, organizationId: organizationId, projectId: projectId, options: operationOptions }, deleteComponentOperationSpec);
    };
    /**
     * Gets all Component Tasks.
     * @param organizationId
     * @param projectId
     * @param componentId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getComponentTasks = function (organizationId, projectId, componentId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, projectId: projectId, componentId: componentId, options: operationOptions }, getComponentTasksOperationSpec);
    };
    /**
     * Creates a new Project Component Task.
     * @param organizationId
     * @param projectId
     * @param componentId
     * @param options The options parameters.
     */
    TeamCloud.prototype.createComponentTask = function (organizationId, projectId, componentId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, projectId: projectId, componentId: componentId, options: operationOptions }, createComponentTaskOperationSpec);
    };
    /**
     * Gets the Component Task.
     * @param id
     * @param organizationId
     * @param projectId
     * @param componentId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getComponentTask = function (id, organizationId, projectId, componentId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ id: id, organizationId: organizationId, projectId: projectId, componentId: componentId, options: operationOptions }, getComponentTaskOperationSpec);
    };
    /**
     * Gets all Component Templates for a Project.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getComponentTemplates = function (organizationId, projectId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, projectId: projectId, options: operationOptions }, getComponentTemplatesOperationSpec);
    };
    /**
     * Gets the Component Template.
     * @param id
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getComponentTemplate = function (id, organizationId, projectId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ id: id, organizationId: organizationId, projectId: projectId, options: operationOptions }, getComponentTemplateOperationSpec);
    };
    /**
     * Gets all Deployment Scopes.
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getDeploymentScopes = function (organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, options: operationOptions }, getDeploymentScopesOperationSpec);
    };
    /**
     * Creates a new Deployment Scope.
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.createDeploymentScope = function (organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, options: operationOptions }, createDeploymentScopeOperationSpec);
    };
    /**
     * Gets a Deployment Scope.
     * @param id
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getDeploymentScope = function (id, organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ id: id, organizationId: organizationId, options: operationOptions }, getDeploymentScopeOperationSpec);
    };
    /**
     * Updates an existing Deployment Scope.
     * @param id
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.updateDeploymentScope = function (id, organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ id: id, organizationId: organizationId, options: operationOptions }, updateDeploymentScopeOperationSpec);
    };
    /**
     * Deletes a Deployment Scope.
     * @param id
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.deleteDeploymentScope = function (id, organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ id: id, organizationId: organizationId, options: operationOptions }, deleteDeploymentScopeOperationSpec);
    };
    /**
     * Gets all Organizations.
     * @param options The options parameters.
     */
    TeamCloud.prototype.getOrganizations = function (options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ options: operationOptions }, getOrganizationsOperationSpec);
    };
    /**
     * Creates a new Organization.
     * @param options The options parameters.
     */
    TeamCloud.prototype.createOrganization = function (options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ options: operationOptions }, createOrganizationOperationSpec);
    };
    /**
     * Gets an Organization.
     * @param org
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getOrganization = function (org, organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ org: org, organizationId: organizationId, options: operationOptions }, getOrganizationOperationSpec);
    };
    /**
     * Deletes an existing Organization.
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.deleteOrganization = function (organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, options: operationOptions }, deleteOrganizationOperationSpec);
    };
    /**
     * Gets all Users.
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getOrganizationUsers = function (organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, options: operationOptions }, getOrganizationUsersOperationSpec);
    };
    /**
     * Creates a new User.
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.createOrganizationUser = function (organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, options: operationOptions }, createOrganizationUserOperationSpec);
    };
    /**
     * Gets a User.
     * @param userId
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getOrganizationUser = function (userId, organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ userId: userId, organizationId: organizationId, options: operationOptions }, getOrganizationUserOperationSpec);
    };
    /**
     * Updates an existing User.
     * @param userId
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.updateOrganizationUser = function (userId, organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ userId: userId, organizationId: organizationId, options: operationOptions }, updateOrganizationUserOperationSpec);
    };
    /**
     * Deletes an existing User.
     * @param userId
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.deleteOrganizationUser = function (userId, organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ userId: userId, organizationId: organizationId, options: operationOptions }, deleteOrganizationUserOperationSpec);
    };
    /**
     * Gets a User A User matching the current authenticated user.
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getOrganizationUserMe = function (organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, options: operationOptions }, getOrganizationUserMeOperationSpec);
    };
    /**
     * Updates an existing User.
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.updateOrganizationUserMe = function (organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, options: operationOptions }, updateOrganizationUserMeOperationSpec);
    };
    /**
     * Gets all Projects.
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getProjects = function (organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, options: operationOptions }, getProjectsOperationSpec);
    };
    /**
     * Creates a new Project.
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.createProject = function (organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, options: operationOptions }, createProjectOperationSpec);
    };
    /**
     * Gets a Project.
     * @param projectId
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getProject = function (projectId, organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ projectId: projectId, organizationId: organizationId, options: operationOptions }, getProjectOperationSpec);
    };
    /**
     * Deletes a Project.
     * @param projectId
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.deleteProject = function (projectId, organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ projectId: projectId, organizationId: organizationId, options: operationOptions }, deleteProjectOperationSpec);
    };
    /**
     * Gets all Tags for a Project.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getProjectTags = function (organizationId, projectId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, projectId: projectId, options: operationOptions }, getProjectTagsOperationSpec);
    };
    /**
     * Creates a new Project Tag.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    TeamCloud.prototype.createProjectTag = function (organizationId, projectId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, projectId: projectId, options: operationOptions }, createProjectTagOperationSpec);
    };
    /**
     * Updates an existing Project Tag.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    TeamCloud.prototype.updateProjectTag = function (organizationId, projectId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, projectId: projectId, options: operationOptions }, updateProjectTagOperationSpec);
    };
    /**
     * Gets a Project Tag by Key.
     * @param tagKey
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getProjectTagByKey = function (tagKey, organizationId, projectId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ tagKey: tagKey, organizationId: organizationId, projectId: projectId, options: operationOptions }, getProjectTagByKeyOperationSpec);
    };
    /**
     * Deletes an existing Project Tag.
     * @param tagKey
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    TeamCloud.prototype.deleteProjectTag = function (tagKey, organizationId, projectId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ tagKey: tagKey, organizationId: organizationId, projectId: projectId, options: operationOptions }, deleteProjectTagOperationSpec);
    };
    /**
     * Gets all Project Templates.
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getProjectTemplates = function (organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, options: operationOptions }, getProjectTemplatesOperationSpec);
    };
    /**
     * Creates a new Project Template.
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.createProjectTemplate = function (organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, options: operationOptions }, createProjectTemplateOperationSpec);
    };
    /**
     * Gets a Project Template.
     * @param projectTemplateId
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getProjectTemplate = function (projectTemplateId, organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ projectTemplateId: projectTemplateId, organizationId: organizationId, options: operationOptions }, getProjectTemplateOperationSpec);
    };
    /**
     * Updates an existing Project Template.
     * @param projectTemplateId
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.updateProjectTemplate = function (projectTemplateId, organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ projectTemplateId: projectTemplateId, organizationId: organizationId, options: operationOptions }, updateProjectTemplateOperationSpec);
    };
    /**
     * Deletes a Project Template.
     * @param projectTemplateId
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.deleteProjectTemplate = function (projectTemplateId, organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ projectTemplateId: projectTemplateId, organizationId: organizationId, options: operationOptions }, deleteProjectTemplateOperationSpec);
    };
    /**
     * Gets all Users for a Project.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getProjectUsers = function (organizationId, projectId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, projectId: projectId, options: operationOptions }, getProjectUsersOperationSpec);
    };
    /**
     * Creates a new Project User
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    TeamCloud.prototype.createProjectUser = function (organizationId, projectId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, projectId: projectId, options: operationOptions }, createProjectUserOperationSpec);
    };
    /**
     * Gets a Project User by ID or email address.
     * @param userId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getProjectUser = function (userId, organizationId, projectId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ userId: userId, organizationId: organizationId, projectId: projectId, options: operationOptions }, getProjectUserOperationSpec);
    };
    /**
     * Updates an existing Project User.
     * @param userId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    TeamCloud.prototype.updateProjectUser = function (userId, organizationId, projectId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ userId: userId, organizationId: organizationId, projectId: projectId, options: operationOptions }, updateProjectUserOperationSpec);
    };
    /**
     * Deletes an existing Project User.
     * @param userId
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    TeamCloud.prototype.deleteProjectUser = function (userId, organizationId, projectId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ userId: userId, organizationId: organizationId, projectId: projectId, options: operationOptions }, deleteProjectUserOperationSpec);
    };
    /**
     * Gets a Project User for the calling user.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getProjectUserMe = function (organizationId, projectId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, projectId: projectId, options: operationOptions }, getProjectUserMeOperationSpec);
    };
    /**
     * Updates an existing Project User.
     * @param organizationId
     * @param projectId
     * @param options The options parameters.
     */
    TeamCloud.prototype.updateProjectUserMe = function (organizationId, projectId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, projectId: projectId, options: operationOptions }, updateProjectUserMeOperationSpec);
    };
    /**
     * Gets the status of a long-running operation.
     * @param trackingId
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getStatus = function (trackingId, organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ trackingId: trackingId, organizationId: organizationId, options: operationOptions }, getStatusOperationSpec);
    };
    /**
     * Gets the status of a long-running operation.
     * @param projectId
     * @param trackingId
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getProjectStatus = function (projectId, trackingId, organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ projectId: projectId, trackingId: trackingId, organizationId: organizationId, options: operationOptions }, getProjectStatusOperationSpec);
    };
    /**
     * Gets all Projects for a User.
     * @param organizationId
     * @param userId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getUserProjects = function (organizationId, userId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, userId: userId, options: operationOptions }, getUserProjectsOperationSpec);
    };
    /**
     * Gets all Projects for a User.
     * @param organizationId
     * @param options The options parameters.
     */
    TeamCloud.prototype.getUserProjectsMe = function (organizationId, options) {
        var operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.sendOperationRequest({ organizationId: organizationId, options: operationOptions }, getUserProjectsMeOperationSpec);
    };
    return TeamCloud;
}(TeamCloudContext));
export { TeamCloud };
// Operation Specifications
var serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);
var getComponentsOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ComponentListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var createComponentOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.ComponentDataResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        },
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer: serializer
};
var getComponentOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ComponentDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.id
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var deleteComponentOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{id}",
    httpMethod: "DELETE",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        204: {
            bodyMapper: Mappers.ComponentDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.id
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var getComponentTasksOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ComponentTaskListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.componentId
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var createComponentTaskOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.ComponentTaskDataResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        },
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body1,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.componentId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer: serializer
};
var getComponentTaskOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/components/{componentId}/tasks/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ComponentTaskDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.id,
        Parameters.componentId
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var getComponentTemplatesOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/templates",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ComponentTemplateListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var getComponentTemplateOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/templates/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ComponentTemplateDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.id
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var getDeploymentScopesOperationSpec = {
    path: "/orgs/{organizationId}/scopes",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentScopeListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {}
    },
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var createDeploymentScopeOperationSpec = {
    path: "/orgs/{organizationId}/scopes",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.DeploymentScopeDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body2,
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer: serializer
};
var getDeploymentScopeOperationSpec = {
    path: "/orgs/{organizationId}/scopes/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentScopeDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [Parameters.$host, Parameters.organizationId, Parameters.id],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var updateDeploymentScopeOperationSpec = {
    path: "/orgs/{organizationId}/scopes/{id}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentScopeDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body3,
    urlParameters: [Parameters.$host, Parameters.organizationId, Parameters.id],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer: serializer
};
var deleteDeploymentScopeOperationSpec = {
    path: "/orgs/{organizationId}/scopes/{id}",
    httpMethod: "DELETE",
    responses: {
        204: {
            bodyMapper: Mappers.DeploymentScopeDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [Parameters.$host, Parameters.organizationId, Parameters.id],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var getOrganizationsOperationSpec = {
    path: "/orgs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OrganizationListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var createOrganizationOperationSpec = {
    path: "/orgs",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.OrganizationDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        },
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body4,
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer: serializer
};
var getOrganizationOperationSpec = {
    path: "/orgs/{organizationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OrganizationDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [Parameters.$host, Parameters.organizationId, Parameters.org],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var deleteOrganizationOperationSpec = {
    path: "/orgs/{organizationId}",
    httpMethod: "DELETE",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var getOrganizationUsersOperationSpec = {
    path: "/orgs/{organizationId}/users",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UserListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var createOrganizationUserOperationSpec = {
    path: "/orgs/{organizationId}/users",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.UserDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        },
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body5,
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer: serializer
};
var getOrganizationUserOperationSpec = {
    path: "/orgs/{organizationId}/users/{userId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UserDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.userId
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var updateOrganizationUserOperationSpec = {
    path: "/orgs/{organizationId}/users/{userId}",
    httpMethod: "PUT",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body6,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.userId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer: serializer
};
var deleteOrganizationUserOperationSpec = {
    path: "/orgs/{organizationId}/users/{userId}",
    httpMethod: "DELETE",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.userId
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var getOrganizationUserMeOperationSpec = {
    path: "/orgs/{organizationId}/me",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UserDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var updateOrganizationUserMeOperationSpec = {
    path: "/orgs/{organizationId}/me",
    httpMethod: "PUT",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body6,
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer: serializer
};
var getProjectsOperationSpec = {
    path: "/orgs/{organizationId}/projects",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {}
    },
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var createProjectOperationSpec = {
    path: "/orgs/{organizationId}/projects",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.ProjectDataResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body7,
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer: serializer
};
var getProjectOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var deleteProjectOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}",
    httpMethod: "DELETE",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var getProjectTagsOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/tags",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.StringDictionaryDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var createProjectTagOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/tags",
    httpMethod: "POST",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        },
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body8,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer: serializer
};
var updateProjectTagOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/tags",
    httpMethod: "PUT",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body8,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer: serializer
};
var getProjectTagByKeyOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/tags/{tagKey}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.StringDictionaryDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.tagKey
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var deleteProjectTagOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/tags/{tagKey}",
    httpMethod: "DELETE",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.tagKey
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var getProjectTemplatesOperationSpec = {
    path: "/orgs/{organizationId}/templates",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectTemplateListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {}
    },
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var createProjectTemplateOperationSpec = {
    path: "/orgs/{organizationId}/templates",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.ProjectTemplateDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body9,
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer: serializer
};
var getProjectTemplateOperationSpec = {
    path: "/orgs/{organizationId}/templates/{projectTemplateId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectTemplateDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectTemplateId
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var updateProjectTemplateOperationSpec = {
    path: "/orgs/{organizationId}/templates/{projectTemplateId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectTemplateDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body10,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectTemplateId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer: serializer
};
var deleteProjectTemplateOperationSpec = {
    path: "/orgs/{organizationId}/templates/{projectTemplateId}",
    httpMethod: "DELETE",
    responses: {
        204: {
            bodyMapper: Mappers.ProjectTemplateDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectTemplateId
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var getProjectUsersOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UserListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var createProjectUserOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.UserDataResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        },
        409: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body5,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer: serializer
};
var getProjectUserOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UserDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.userId
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var updateProjectUserOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.UserDataResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body6,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.userId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer: serializer
};
var deleteProjectUserOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users/{userId}",
    httpMethod: "DELETE",
    responses: {
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.userId
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var getProjectUserMeOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users/me",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UserDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var updateProjectUserMeOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/users/me",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.UserDataResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    requestBody: Parameters.body6,
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer: serializer
};
var getStatusOperationSpec = {
    path: "/orgs/{organizationId}/status/{trackingId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.StatusResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        302: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.trackingId
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var getProjectStatusOperationSpec = {
    path: "/orgs/{organizationId}/projects/{projectId}/status/{trackingId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.StatusResult
        },
        202: {
            bodyMapper: Mappers.StatusResult
        },
        302: {
            bodyMapper: Mappers.StatusResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.projectId,
        Parameters.trackingId
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var getUserProjectsOperationSpec = {
    path: "/orgs/{organizationId}/users/{userId}/projects",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.organizationId,
        Parameters.userId
    ],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
var getUserProjectsMeOperationSpec = {
    path: "/orgs/{organizationId}/me/projects",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectListDataResult
        },
        400: {
            bodyMapper: Mappers.ErrorResult
        },
        401: {},
        403: {},
        404: {
            bodyMapper: Mappers.ErrorResult
        }
    },
    urlParameters: [Parameters.$host, Parameters.organizationId],
    headerParameters: [Parameters.accept],
    serializer: serializer
};
//# sourceMappingURL=teamCloud.js.map