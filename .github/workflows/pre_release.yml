name: Create Pre-release

on:
  push:
    branches: [master]

env:
  BUILD_CONFIGURATION: Release
  SOURCE_DIRECTORY: ./src

jobs:
  build:
    name: Create new Pre-release
    if: "!contains(join(github.event.commits.*.message), '+norelease')"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.TEAMCLOUD_PAT }}
          fetch-depth: 0

      - name: Checkout Tags
        run: git fetch --prune --tags

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.403'

      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.2
        with:
          versionSpec: '5.2.4'

      - name: Execute GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.2

      - name: Build & Package for Pre-release
        run: dotnet build ${{ env.SOURCE_DIRECTORY }}/TeamCloud.sln -o Prerelease -c ${{ env.BUILD_CONFIGURATION }} -p:VersionPrefix="${{ steps.gitversion.outputs.majorMinorPatch }}" -p:AssemblyVersion="${{ steps.gitversion.outputs.assemblySemVer }}" -p:FileVersion="${{ steps.gitversion.outputs.assemblySemFileVer }}" -p:IncludeSymbols=true --version-suffix "pre"

      - name: Publish Pre-release NuGet Packages
        run: dotnet nuget push 'Prerelease/*.nupkg' --api-key '${{ secrets.MYGET_DEV_TOKEN }}' --source 'https://www.myget.org/F/teamcloud-dev/api/v2/package' --symbol-api-key '${{ secrets.MYGET_DEV_TOKEN }}' --symbol-source 'https://www.myget.org/F/teamcloud-dev/symbols/api/v2/package' --skip-duplicate

      - name: Build & Package for Release
        run: dotnet build ${{ env.SOURCE_DIRECTORY }}/TeamCloud.sln -c ${{ env.BUILD_CONFIGURATION }} -p:VersionPrefix="${{ steps.gitversion.outputs.majorMinorPatch }}" -p:AssemblyVersion="${{ steps.gitversion.outputs.assemblySemVer }}" -p:FileVersion="${{ steps.gitversion.outputs.assemblySemFileVer }}" -p:IncludeSymbols=true

      - name: Create Release Asset - NuGet
        run: zip -r -j NuGet.zip src -i '*.nupkg'

      - name: Create Release Asset - TeamCloud.API
        run: |
          dotnet publish ${{ env.SOURCE_DIRECTORY }}/TeamCloud.API/TeamCloud.API.csproj -o TeamCloud.API -c ${{ env.BUILD_CONFIGURATION }} -p:VersionPrefix="${{ steps.gitversion.outputs.majorMinorPatch }}" -p:AssemblyVersion="${{ steps.gitversion.outputs.assemblySemVer }}" -p:FileVersion="${{ steps.gitversion.outputs.assemblySemFileVer }}" -p:IncludeSymbols=true --no-build

          pushd TeamCloud.API
            zip -r ../TeamCloud.API.zip *
          popd

      - name: Create Release Asset - TeamCloud.Orchestrator
        run: |
          dotnet publish ${{ env.SOURCE_DIRECTORY }}/TeamCloud.Orchestrator/TeamCloud.Orchestrator.csproj -o TeamCloud.Orchestrator -c ${{ env.BUILD_CONFIGURATION }} -p:VersionPrefix="${{ steps.gitversion.outputs.majorMinorPatch }}" -p:AssemblyVersion="${{ steps.gitversion.outputs.assemblySemVer }}" -p:FileVersion="${{ steps.gitversion.outputs.assemblySemFileVer }}" -p:IncludeSymbols=true --no-build

          pushd TeamCloud.Orchestrator
            zip -r ../TeamCloud.Orchestrator.zip *
          popd

      - name: Create Release Asset - TeamCloud.Web
        run: |
          pushd web
            zip -r ../TeamCloud.Web.zip * .deployment -x .vscode -x \*.md -x .DS_Store -x .env.development -x build/\* -x lib/\* -x node_modules/\* -x .gitignore
          popd

      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - uses: actions/setup-node@v1
        with:
          node-version: '12'

      - name: Create index.json
        run: python ./scripts/create-index.py ${{ steps.gitversion.outputs.majorMinorPatch }}

      - name: Get TeamCloud CLI Version
        id: cli_version
        run: python ./scripts/cli-version.py

      - name: Create OpenAPI & Python Client
        run: bash ./scripts/create-clients.sh ../../TeamCloud.API/TeamCloud.API.dll

      - name: Build TeamCloud CLI
        run: bash ./scripts/build-cli.sh

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 'v${{ steps.gitversion.outputs.majorMinorPatch }}'
          release_name: 'v${{ steps.gitversion.outputs.majorMinorPatch }}-pre'
          body: 'Pre-release build.'
          prerelease: true

      - name: Upload Release Asset - NuGet.zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: NuGet.zip
          asset_name: NuGet.zip
          asset_content_type: application/zip

      - name: Upload Release Asset - TeamCloud.API.zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: TeamCloud.API.zip
          asset_name: TeamCloud.API.zip
          asset_content_type: application/zip

      - name: Upload Release Asset - TeamCloud.Orchestrator.zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: TeamCloud.Orchestrator.zip
          asset_name: TeamCloud.Orchestrator.zip
          asset_content_type: application/zip

      - name: Upload Release Asset - TeamCloud.Web.zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: TeamCloud.Web.zip
          asset_name: TeamCloud.Web.zip
          asset_content_type: application/zip

      - name: Upload Release Asset - azuredeploy.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/azuredeploy.json
          asset_name: azuredeploy.json
          asset_content_type: application/json

      - name: Upload Release Asset - azuredeploy.web.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deploy/azuredeploy.web.json
          asset_name: azuredeploy.web.json
          asset_content_type: application/json

      - name: Upload Release Asset - index.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: index.json
          asset_name: index.json
          asset_content_type: application/json

      - name: Upload Release Asset - openapi.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: openapi/openapi.json
          asset_name: openapi.json
          asset_content_type: application/json

      - name: Upload Release Asset - openapi.yaml
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: openapi/openapi.yaml
          asset_name: openapi.yaml
          asset_content_type: application/x-yaml

      - name: Upload Release Asset - TeamCloud CLI WHL
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/tc-${{ steps.cli_version.outputs.version }}-py2.py3-none-any.whl
          asset_name: tc-${{ steps.cli_version.outputs.version }}-py2.py3-none-any.whl
          asset_content_type: application/zip

      - name: Update CLI.md Version
        shell: python
        run: |
          from pathlib import Path

          with open(Path(Path.cwd() / 'docs/tpl') / 'CLI.md.tpl', 'r') as f:
              content = f.read()

          content = content.replace('%{{latest_cli}}%', 'https://github.com/microsoft/TeamCloud/releases/download/v${{ steps.gitversion.outputs.majorMinorPatch }}/tc-${{ steps.cli_version.outputs.version }}-py2.py3-none-any.whl')

          with open(Path(Path.cwd() / 'docs') / 'CLI.md', 'w') as f:
              f.write(content)

      # Commit the docs only when any have changed
      # (git diff --quiet && git diff --staged --quiet )
      - name: Commit Updated Docs
        run: |
          git config user.name colbylwilliams
          git config user.email colbylwilliams@gmail.com
          git add docs
          git diff --quiet && git diff --staged --quiet || git commit -m "[gh-action] Update Docs +norelease"
          git push origin master
